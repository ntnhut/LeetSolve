Search.setIndex({"docnames": ["Array/01_ARR_1260_Shift_2D_Grid", "Array/01_ARR_448_Find_All_Numbers_Disappeared_in_an_Array", "Array/01_ARR_48_Rotate_Image", "Array/01_ARR_605_Can_Place_Flowers", "Array/01_ARR_739_Daily_Temperatures", "Array/01_ARR_867_Transpose_Matrix", "Array/01_ARR_941_Valid_Mountain_Array", "Array/index", "Binary_Search/540_Single_Element_in_a_Sorted_Array", "Binary_Search/index", "Binary_Tree/104_Maximum_Depth_of_Binary_Tree", "Binary_Tree/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree", "Binary_Tree/index", "Counting/136_Single_Number", "Counting/1679_Max_Number_of_K-Sum_Pairs", "Counting/387_First_Unique_Character_in_a_String", "Counting/index", "Dynamic_Programming/05_DP_120_Triangle", "Dynamic_Programming/05_DP_368_Largest_Divisible_Subset", "Dynamic_Programming/05_DP_509_Fibonacci_Number", "Dynamic_Programming/05_DP_62_Unique_Paths", "Dynamic_Programming/05_DP_63_Unique_Paths_II", "Dynamic_Programming/index", "Graph/785_Is_Graph_Bipartite", "Graph/797_All_Paths_From_Source_to_Target", "Graph/index", "Hash_Table/03_H_13_Roman_to_Integer", "Hash_Table/03_H_1695_Maximum_Erasure_Value", "Hash_Table/index", "Linked_List/02_LL_160_Intersection_of_Two_Linked_Lists", "Linked_List/02_LL_203_Remove_Linked_List_Elements", "Linked_List/02_LL_21_Merge_Two_Sorted_Lists", "Linked_List/02_LL_24_Swap_Nodes_in_Pairs", "Linked_List/02_LL_2_add_two_numbers", "Linked_List/index", "Mathematics/09_MTH_121_Best_Time_to_Buy_and_Sell_Stock", "Mathematics/09_MTH_1641_Count_Sorted_Vowel_Strings", "Mathematics/09_MTH_1680_Concatenation_of_Consecutive_Binary_Numbers", "Mathematics/09_MTH_1689_Partitioning_Into_Minimum_Number_Of_Deci-Binary_Numbers", "Mathematics/09_MTH_1710_Maximum_Units_on_a_Truck", "Mathematics/09_MTH_171_Excel_Sheet_Collumn_Number", "Mathematics/09_MTH_279_Perfect_Squares", "Mathematics/09_MTH_318_Maximum_Product_of_Word_Lengths", "Mathematics/09_MTH_326_Power_of_Three", "Mathematics/09_MTH_342_Power_of_Four", "Mathematics/09_MTH_376_Wiggle_Subsequence", "Mathematics/09_MTH_461_Hamming_Distance", "Mathematics/09_MTH_462_Minimum_Moves_to_Equal_Array_Elements_II", "Mathematics/09_MTH_565_Array_Nesting", "Mathematics/09_MTH_78_Subsets", "Mathematics/index", "Prefix_Sum/1480_Running_Sum_of_1d_Array", "Prefix_Sum/53_Maximum_Subarray", "Prefix_Sum/560_Subarray_Sum_Equals_K", "Prefix_Sum/index", "Priority_Queue/1046_Last_Stone_Weight", "Priority_Queue/1354_Construct_Target_Array_With_Multiple_Sums", "Priority_Queue/378_Kth_Smallest_Element_in_a_Sorted_Matrix", "Priority_Queue/703_Kth_Largest_Element_in_a_Stream", "Priority_Queue/index", "Recursive/17_Letter_Combinations_of_a_Phone_Number", "Recursive/index", "Sorting/04_SORT_1288_Remove_Covered_Intervals", "Sorting/04_SORT_1647_Minimum_Deletions_to_Make_Character_Frequencies_Unique", "Sorting/04_SORT_169_Majority_Element", "Sorting/04_SORT_287_Find_the_Duplicate_Number", "Sorting/04_SORT_729_My_Calendar_I", "Sorting/04_SORT_80_Remove_Duplicates_from_Sorted_Array", "Sorting/04_SORT_88_Merge_Sorted_Array", "Sorting/index", "Stack/1209_Remove_All_Adjacent_Duplicates_in_String_II", "Stack/20_Valid_Parentheses", "Stack/844_Backspace_String_Compare", "Stack/index", "String/08_STR_165_Compare_Version_Numbers", "String/08_STR_242_Valid_Anagram", "String/08_STR_3_Longest_Substring_Without_Repeating_Characters", "String/08_STR_520_Detect_Capital", "String/08_STR_682_Baseball_Game", "String/08_STR_804_Unique_Morse_Code_Words", "String/08_STR_890_Find_and_Replace_Pattern", "String/08_STR_929_Unique_Email_Addresses", "String/index", "Two_Pointers/08_TP_11_Container_With_Most_Water", "Two_Pointers/08_TP_141_Linked_List_Cycle", "Two_Pointers/08_TP_19_Remove_Nth_Node_From_End_of_List", "Two_Pointers/08_TP_581_Shortest_Unsorted_Continuous_Subarray", "Two_Pointers/08_TP_876_Middle_of_the_Linked_List", "Two_Pointers/index", "conclude", "faq", "index", "intro", "thanks", "welcome"], "filenames": ["Array\\01_ARR_1260_Shift_2D_Grid.md", "Array\\01_ARR_448_Find_All_Numbers_Disappeared_in_an_Array.md", "Array\\01_ARR_48_Rotate_Image.md", "Array\\01_ARR_605_Can_Place_Flowers.md", "Array\\01_ARR_739_Daily_Temperatures.md", "Array\\01_ARR_867_Transpose_Matrix.md", "Array\\01_ARR_941_Valid_Mountain_Array.md", "Array\\index.rst", "Binary_Search\\540_Single_Element_in_a_Sorted_Array.md", "Binary_Search\\index.rst", "Binary_Tree\\104_Maximum_Depth_of_Binary_Tree.md", "Binary_Tree\\235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.md", "Binary_Tree\\index.rst", "Counting\\136_Single_Number.md", "Counting\\1679_Max_Number_of_K-Sum_Pairs.md", "Counting\\387_First_Unique_Character_in_a_String.md", "Counting\\index.rst", "Dynamic_Programming\\05_DP_120_Triangle.md", "Dynamic_Programming\\05_DP_368_Largest_Divisible_Subset.md", "Dynamic_Programming\\05_DP_509_Fibonacci_Number.md", "Dynamic_Programming\\05_DP_62_Unique_Paths.md", "Dynamic_Programming\\05_DP_63_Unique_Paths_II.md", "Dynamic_Programming\\index.rst", "Graph\\785_Is_Graph_Bipartite.md", "Graph\\797_All_Paths_From_Source_to_Target.md", "Graph\\index.rst", "Hash_Table\\03_H_13_Roman_to_Integer.md", "Hash_Table\\03_H_1695_Maximum_Erasure_Value.md", "Hash_Table\\index.rst", "Linked_List\\02_LL_160_Intersection_of_Two_Linked_Lists.md", "Linked_List\\02_LL_203_Remove_Linked_List_Elements.md", "Linked_List\\02_LL_21_Merge_Two_Sorted_Lists.md", "Linked_List\\02_LL_24_Swap_Nodes_in_Pairs.md", "Linked_List\\02_LL_2_add_two_numbers.md", "Linked_List\\index.rst", "Mathematics\\09_MTH_121_Best_Time_to_Buy_and_Sell_Stock.md", "Mathematics\\09_MTH_1641_Count_Sorted_Vowel_Strings.md", "Mathematics\\09_MTH_1680_Concatenation_of_Consecutive_Binary_Numbers.md", "Mathematics\\09_MTH_1689_Partitioning_Into_Minimum_Number_Of_Deci-Binary_Numbers.md", "Mathematics\\09_MTH_1710_Maximum_Units_on_a_Truck.md", "Mathematics\\09_MTH_171_Excel_Sheet_Collumn_Number.md", "Mathematics\\09_MTH_279_Perfect_Squares.md", "Mathematics\\09_MTH_318_Maximum_Product_of_Word_Lengths.md", "Mathematics\\09_MTH_326_Power_of_Three.md", "Mathematics\\09_MTH_342_Power_of_Four.md", "Mathematics\\09_MTH_376_Wiggle_Subsequence.md", "Mathematics\\09_MTH_461_Hamming_Distance.md", "Mathematics\\09_MTH_462_Minimum_Moves_to_Equal_Array_Elements_II.md", "Mathematics\\09_MTH_565_Array_Nesting.md", "Mathematics\\09_MTH_78_Subsets.md", "Mathematics\\index.rst", "Prefix_Sum\\1480_Running_Sum_of_1d_Array.md", "Prefix_Sum\\53_Maximum_Subarray.md", "Prefix_Sum\\560_Subarray_Sum_Equals_K.md", "Prefix_Sum\\index.rst", "Priority_Queue\\1046_Last_Stone_Weight.md", "Priority_Queue\\1354_Construct_Target_Array_With_Multiple_Sums.md", "Priority_Queue\\378_Kth_Smallest_Element_in_a_Sorted_Matrix.md", "Priority_Queue\\703_Kth_Largest_Element_in_a_Stream.md", "Priority_Queue\\index.rst", "Recursive\\17_Letter_Combinations_of_a_Phone_Number.md", "Recursive\\index.rst", "Sorting\\04_SORT_1288_Remove_Covered_Intervals.md", "Sorting\\04_SORT_1647_Minimum_Deletions_to_Make_Character_Frequencies_Unique.md", "Sorting\\04_SORT_169_Majority_Element.md", "Sorting\\04_SORT_287_Find_the_Duplicate_Number.md", "Sorting\\04_SORT_729_My_Calendar_I.md", "Sorting\\04_SORT_80_Remove_Duplicates_from_Sorted_Array.md", "Sorting\\04_SORT_88_Merge_Sorted_Array.md", "Sorting\\index.rst", "Stack\\1209_Remove_All_Adjacent_Duplicates_in_String_II.md", "Stack\\20_Valid_Parentheses.md", "Stack\\844_Backspace_String_Compare.md", "Stack\\index.rst", "String\\08_STR_165_Compare_Version_Numbers.md", "String\\08_STR_242_Valid_Anagram.md", "String\\08_STR_3_Longest_Substring_Without_Repeating_Characters.md", "String\\08_STR_520_Detect_Capital.md", "String\\08_STR_682_Baseball_Game.md", "String\\08_STR_804_Unique_Morse_Code_Words.md", "String\\08_STR_890_Find_and_Replace_Pattern.md", "String\\08_STR_929_Unique_Email_Addresses.md", "String\\index.rst", "Two_Pointers\\08_TP_11_Container_With_Most_Water.md", "Two_Pointers\\08_TP_141_Linked_List_Cycle.md", "Two_Pointers\\08_TP_19_Remove_Nth_Node_From_End_of_List.md", "Two_Pointers\\08_TP_581_Shortest_Unsorted_Continuous_Subarray.md", "Two_Pointers\\08_TP_876_Middle_of_the_Linked_List.md", "Two_Pointers\\index.rst", "conclude.md", "faq.rst", "index.rst", "intro.md", "thanks.md", "welcome.rst"], "titles": ["Shift 2D Grid", "Find All Numbers Disappeared in an Array", "Rotate Image", "Can Place Flowers", "Daily Temperatures", "Transpose Matrix", "Valid Mountain Array", "Array", "Single Element in a Sorted Array", "Binary Search", "Maximum Depth of Binary Tree", "Lowest Common Ancestor of a Binary Search Tree", "Binary Tree", "Single Number", "Max Number of K-Sum Pairs", "First Unique Character in a String", "Counting", "Triangle", "Largest Divisible Subset", "Fibonacci Number", "Unique Paths", "Unique Paths II", "Dynamic Programming", "Is Graph Bipartite?", "All Paths From Source to Target", "Graph", "Roman to Integer", "Maximum Erasure Value", "Hash Table", "Intersection of Two Linked Lists", "Remove Linked List Elements", "Merge Two Sorted Lists", "Swap Nodes in Pairs", "Add Two Numbers", "Linked List", "Best Time to Buy and Sell Stock", "Count Sorted Vowel Strings", "Concatenation of Consecutive Binary Numbers", "Partitioning Into Minimum Number Of Deci-Binary Numbers", "Maximum Units on a Truck", "Excel Sheet Column Number", "Perfect Squares", "Maximum Product of Word Lengths", "Power of Three", "Power of Four", "Wiggle Subsequence", "Hamming Distance", "Minimum Moves to Equal Array Elements II", "Array Nesting", "Subsets", "Mathematics", "Running Sum of 1d Array", "Maximum Subarray", "Subarray Sum Equals K", "Prefix Sum", "Last Stone Weight", "Construct Target Array With Multiple Sums", "Kth Smallest Element in a Sorted Matrix", "Kth Largest Element in a Stream", "Priority Queue", "Letter Combinations of a Phone Number", "Recursive", "Remove Covered Intervals", "Minimum Deletions to Make Character Frequencies Unique", "Majority Element", "Find the Duplicate Number", "My Calendar I", "Remove Duplicates from Sorted Array II", "Merge Sorted Array", "Sorting", "Remove All Adjacent Duplicates in String II", "Valid Parentheses", "Backspace String Compare", "Stack", "Compare Version Numbers", "Valid Anagram", "Longest Substring Without Repeating Characters", "Detect Capital", "Baseball Game", "Unique Morse Code Words", "Find and Replace Pattern", "Unique Email Addresses", "String", "Container With Most Water", "Linked List Cycle", "Remove Nth Node From End of List", "Shortest Unsorted Continuous Subarray", "Middle of the Linked List", "Two Pointers", "Conclusion", "Frequently Asked Questions", "Welcome to LeetSolve!", "Introduction", "Thank you!", "Welcome to LeetSolve!"], "terms": {"given": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "size": [0, 1, 2, 3, 4, 5, 6, 8, 17, 18, 20, 21, 23, 24, 27, 35, 39, 42, 45, 47, 48, 49, 51, 53, 55, 56, 57, 58, 62, 63, 64, 65, 67, 74, 78, 79, 81, 83, 85, 86, 92], "m": [0, 5, 14, 18, 20, 21, 26, 29, 41, 42, 47, 56, 57, 60, 68, 79, 80, 81, 84, 86, 91, 94], "x": [0, 2, 10, 11, 20, 21, 26, 29, 30, 31, 32, 33, 36, 41, 43, 44, 46, 47, 55, 56, 57, 60, 66, 76, 78, 80, 83, 84, 85, 87], "n": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 92], "an": [0, 2, 3, 4, 6, 7, 8, 14, 17, 21, 23, 26, 27, 30, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 62, 64, 65, 67, 68, 70, 71, 72, 74, 75, 78, 79, 81, 83, 86, 89, 92, 93], "integ": [0, 1, 3, 4, 5, 6, 8, 13, 14, 18, 21, 27, 28, 30, 33, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 58, 65, 66, 67, 68, 70, 74, 78, 83, 86], "k": [0, 16, 21, 36, 48, 54, 57, 58, 60, 67, 68, 70], "you": [0, 1, 2, 3, 4, 5, 8, 10, 11, 13, 14, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 74, 75, 76, 78, 80, 81, 83, 84, 85, 86, 89, 91, 92, 94], "need": [0, 4, 13, 17, 18, 23, 30, 32, 33, 38, 39, 40, 47, 49, 56, 57, 63, 67, 70, 76, 78, 80, 86], "time": [0, 8, 13, 20, 21, 38, 45, 50, 55, 56, 57, 63, 64, 65, 66, 67, 68, 81, 86, 87, 89, 91, 92, 93, 94], "In": [0, 3, 4, 14, 18, 29, 30, 35, 36, 37, 40, 41, 44, 45, 47, 48, 53, 56, 60, 62, 63, 64, 67, 83, 89, 91, 92, 94], "oper": [0, 13, 14, 30, 42, 44, 60, 66, 78, 81], "element": [0, 1, 3, 5, 9, 13, 14, 18, 24, 34, 45, 48, 49, 50, 53, 56, 59, 68, 69, 78], "i": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94], "j": [0, 1, 2, 4, 5, 17, 18, 20, 21, 24, 35, 42, 47, 53, 57, 60, 62, 64, 67, 68, 70, 76, 83, 86], "move": [0, 17, 20, 21, 50, 60, 70, 83], "0": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87], "return": [0, 1, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "after": [0, 4, 29, 36, 37, 41, 56, 57, 62, 64, 67, 70, 72, 80, 81, 84, 85, 89], "appli": [0, 26, 41, 47, 78, 81, 85], "input": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92], "4": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 17, 18, 19, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 42, 44, 45, 46, 48, 51, 52, 55, 56, 58, 60, 62, 64, 65, 67, 70, 71, 75, 78, 83, 84, 85, 86, 87], "5": [0, 1, 2, 4, 5, 6, 8, 11, 14, 15, 17, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 39, 44, 45, 47, 48, 51, 52, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 70, 74, 75, 76, 78, 83, 84, 85, 86, 87], "6": [0, 1, 2, 4, 5, 6, 11, 14, 17, 20, 27, 29, 30, 33, 35, 36, 37, 39, 45, 48, 51, 52, 60, 62, 67, 68, 83, 86, 87], "7": [0, 1, 2, 5, 6, 8, 10, 11, 17, 20, 30, 33, 35, 37, 39, 40, 41, 45, 47, 52, 53, 55, 60, 67, 83], "8": [0, 1, 2, 5, 6, 8, 11, 17, 18, 27, 29, 33, 38, 39, 41, 45, 47, 52, 55, 56, 57, 58, 60, 62, 83, 86], "9": [0, 2, 5, 6, 10, 11, 14, 18, 20, 21, 26, 29, 33, 37, 38, 39, 41, 45, 47, 56, 57, 58, 60, 66, 68, 78, 86], "output": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89], "19": [0, 43], "11": [0, 2, 8, 17, 37, 38, 41, 47, 57], "10": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 20, 21, 26, 27, 29, 30, 33, 35, 36, 37, 38, 39, 41, 44, 45, 47, 48, 49, 51, 52, 53, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 70, 71, 75, 76, 78, 83, 84, 86], "12": [0, 2, 26, 37, 41, 57, 79], "21": 0, "13": [0, 2, 41, 45, 57], "length": [0, 1, 2, 3, 4, 5, 6, 8, 13, 14, 15, 17, 18, 21, 23, 24, 26, 27, 29, 31, 33, 35, 36, 38, 39, 40, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86], "50": [0, 4, 26, 30, 31, 36, 80], "1000": [0, 2, 5, 18, 26, 39, 42, 45, 51, 53, 55, 62, 66, 78], "100": [0, 4, 10, 20, 21, 23, 26, 31, 32, 33, 44, 77, 79, 81, 85, 87], "can": [0, 1, 2, 4, 7, 8, 11, 13, 14, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 53, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 74, 79, 81, 83, 84, 85, 86, 89, 91, 92, 94], "vector": [0, 1, 2, 3, 4, 5, 6, 8, 13, 14, 17, 18, 19, 20, 21, 23, 24, 27, 35, 39, 42, 45, 47, 48, 49, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 65, 67, 68, 70, 74, 78, 79, 80, 81, 83, 85, 86], "v": [0, 1, 4, 18, 23, 26, 60, 72], "perform": [0, 2, 4, 8, 14, 18, 23, 32, 33, 42, 56, 57, 63, 70, 72, 92], "easier": [0, 1, 26, 72, 89, 92], "One": [0, 1, 18, 20, 36, 45, 48, 55, 63, 84, 87, 92], "wai": [0, 1, 3, 4, 18, 20, 21, 23, 36, 40, 55, 57, 63, 72, 89, 92, 93], "do": [0, 1, 2, 4, 17, 20, 29, 33, 41, 42, 57, 63, 65, 66, 67, 81, 85, 92], "thi": [0, 3, 4, 17, 18, 20, 21, 23, 24, 29, 35, 36, 39, 41, 42, 43, 44, 45, 47, 48, 55, 56, 57, 58, 60, 62, 64, 65, 67, 68, 70, 74, 76, 77, 78, 81, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94], "concaten": [0, 50, 70, 79, 81], "row": [0, 2, 5, 20, 21, 57], "matrix": [0, 2, 7, 59], "If": [0, 3, 4, 8, 15, 18, 20, 21, 23, 29, 35, 36, 40, 41, 42, 44, 47, 51, 55, 56, 58, 60, 62, 67, 71, 74, 81, 84, 86, 87, 91, 92, 94], "where": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92], "ani": [0, 2, 18, 20, 21, 24, 33, 35, 38, 39, 45, 49, 53, 55, 56, 60, 62, 74, 80, 83, 87, 89, 91, 94], "non": [0, 13, 15, 23, 31, 33, 45, 57, 66, 67, 68, 74, 81], "neg": [0, 1, 33, 45, 52], "go": [0, 3, 4, 32, 87, 92], "back": [0, 3, 23, 24, 26, 57, 70, 78], "origin": [0, 29, 45, 75], "e": [0, 21, 24, 32, 36, 43, 45, 57, 60, 63, 66, 71, 76, 80, 81, 84], "did": 0, "first": [0, 13, 14, 16, 21, 29, 31, 37, 39, 45, 47, 48, 53, 62, 63, 66, 67, 68, 70, 77, 81, 86], "result": [0, 1, 4, 5, 8, 18, 20, 26, 33, 37, 41, 49, 51, 52, 53, 55, 60, 63, 66, 67, 74, 80, 87], "start": [0, 14, 18, 19, 20, 27, 29, 36, 44, 45, 48, 53, 56, 62, 66, 76, 78, 81, 83, 84, 85], "from": [0, 10, 14, 17, 18, 19, 20, 25, 26, 35, 36, 41, 44, 45, 47, 48, 49, 53, 56, 57, 60, 62, 68, 69, 70, 74, 78, 80, 83, 84, 88, 89, 91, 92, 94], "gener": [0, 21, 29, 30, 33, 37, 40, 53, 87, 92], "For": [0, 2, 4, 8, 14, 17, 18, 20, 26, 29, 31, 35, 36, 37, 38, 40, 41, 42, 45, 47, 48, 52, 53, 56, 58, 62, 63, 70, 71, 74, 76, 78, 79, 81, 83, 92], "It": [0, 8, 11, 20, 26, 33, 41, 43, 45, 53, 57, 58, 60, 66, 67, 70, 74, 76, 78, 81, 92], "With": [0, 47, 59, 62, 66, 88, 89], "now": [0, 3, 18, 23, 29, 41, 53, 78], "The": [0, 4, 5, 8, 10, 11, 13, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 52, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 72, 74, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 94], "final": [0, 14, 18, 36, 37, 41, 62, 67, 68, 70, 76, 83, 92], "includ": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 92, 94], "iostream": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "us": [0, 1, 2, 3, 4, 5, 6, 8, 11, 13, 14, 17, 18, 20, 21, 23, 24, 26, 27, 29, 35, 36, 38, 39, 40, 41, 43, 44, 45, 48, 49, 51, 53, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92], "namespac": [0, 1, 2, 3, 4, 5, 6, 8, 11, 13, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86], "std": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "int": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "shiftgrid": 0, "auto": [0, 1, 2, 4, 5, 13, 18, 24, 31, 35, 41, 48, 49, 51, 52, 53, 56, 57, 58, 60, 62, 66, 70, 80, 81, 85, 87], "r": [0, 27, 51, 60], "insert": [0, 3, 18, 49, 57, 58, 66, 79, 81], "end": [0, 17, 18, 23, 27, 29, 33, 35, 39, 41, 47, 49, 53, 55, 56, 57, 58, 62, 63, 64, 65, 66, 70, 71, 72, 74, 75, 76, 78, 80, 81, 86, 87, 88, 89], "begin": [0, 3, 17, 18, 29, 35, 39, 47, 49, 55, 56, 57, 58, 62, 63, 64, 65, 67, 72, 74, 75, 78, 86], "const": [0, 2, 6, 17, 21, 37, 39, 41, 47, 57, 60, 64, 66, 67, 74, 77, 80, 86], "p": [0, 11, 20, 24, 60, 62, 70, 80], "void": [0, 1, 2, 4, 5, 18, 24, 30, 31, 32, 33, 49, 51, 60, 67, 68, 80, 85, 87], "printresult": [0, 5, 31, 33, 51, 60, 67, 68, 80], "cout": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "main": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "runtim": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "o": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92], "mn": 0, "nest": [0, 50], "loop": [0, 4, 20, 24, 40, 41, 43, 44, 47, 53, 81], "extra": [0, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "space": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92], "To": [0, 4, 18, 26, 29, 40, 41, 48, 56, 60, 68, 74, 76, 81], "": [0, 1, 3, 5, 10, 14, 15, 20, 23, 26, 32, 36, 39, 40, 41, 48, 51, 55, 56, 60, 62, 63, 70, 71, 74, 76, 78, 79, 80, 81, 91, 92, 94], "function": [0, 2, 5, 29, 39, 41, 67, 68, 92], "modulo": [0, 37, 56], "usual": [0, 26, 92], "index": [0, 1, 8, 15, 17, 18, 56, 74], "ensur": [0, 68, 76, 89, 92], "inbound": 0, "num": [1, 8, 13, 14, 18, 27, 47, 48, 49, 52, 53, 58, 64, 67, 86], "rang": [1, 10, 11, 26, 30, 31, 32, 33, 40, 43, 48, 60, 65, 66, 78, 84, 87, 89, 92], "3": [1, 2, 5, 8, 10, 14, 17, 23, 39, 46, 48, 58, 62, 67, 81, 83, 87], "could": [1, 2, 3, 4, 17, 18, 23, 29, 41, 43, 44, 45, 46, 51, 57, 60, 64, 85, 92], "without": [1, 3, 32, 33, 38, 41, 43, 44, 49, 60, 65, 66, 81, 82], "mai": [1, 17, 23, 32, 33, 45, 56, 57, 64, 74, 78, 80, 81, 83, 92], "assum": [1, 18, 33, 47, 48, 53, 60, 64, 86], "list": [1, 24, 32, 33, 37, 62, 78, 80, 88], "doe": [1, 4, 15, 18, 23, 33, 38, 39, 47, 60, 67, 74, 78, 80, 81, 87], "count": [1, 15, 18, 46, 50, 53, 57, 62, 81], "bool": [1, 3, 6, 23, 29, 41, 42, 43, 44, 48, 56, 62, 65, 66, 71, 72, 75, 77, 84], "which": [1, 2, 3, 4, 8, 11, 13, 23, 26, 29, 31, 35, 36, 37, 39, 41, 42, 46, 47, 52, 53, 56, 58, 60, 63, 65, 70, 74, 76, 79, 81, 83, 86, 89, 92], "valu": [1, 2, 4, 11, 14, 18, 20, 23, 28, 31, 32, 37, 40, 41, 42, 47, 48, 53, 55, 56, 57, 58, 70, 74, 78, 87], "finddisappearednumb": 1, "exist": [1, 6, 11, 15, 42, 43, 44, 45, 64, 67, 74, 80], "fals": [1, 3, 6, 23, 42, 43, 44, 56, 62, 66, 71, 72, 75, 77, 84], "true": [1, 3, 6, 23, 29, 42, 43, 44, 48, 56, 62, 65, 66, 71, 72, 75, 77, 84], "push_back": [1, 3, 18, 23, 24, 49, 51, 60, 66, 68, 70, 72, 74, 78, 80, 85], "print": [1, 4, 30, 32, 49, 87], "much": [1, 41, 48, 92], "less": [1, 20, 21, 41, 47, 48, 57, 58, 62, 64, 66, 74, 92], "than": [1, 4, 15, 20, 21, 33, 35, 41, 47, 48, 57, 58, 62, 63, 64, 65, 66, 72, 74, 80, 84, 86], "optim": [1, 27, 41, 48, 65, 87, 89, 92], "effici": [1, 4, 48, 65, 89, 92], "store": [1, 20, 33, 51, 53, 66, 70, 74, 83], "singl": [1, 9, 16, 33, 35, 68], "bit": [1, 44, 46, 74], "indic": [1, 5, 18, 47, 53, 64, 86], "its": [1, 4, 5, 10, 11, 15, 17, 27, 29, 32, 37, 38, 40, 44, 45, 52, 56, 58, 62, 71, 85, 86, 92], "becaus": [1, 18, 26, 35, 38, 43, 45, 48, 62, 63, 66, 68, 74, 76, 80, 86, 92], "thei": [1, 29, 30, 38, 42, 63, 66, 67, 72, 81, 84, 89, 92], "ar": [1, 2, 3, 4, 8, 11, 14, 17, 18, 20, 21, 23, 24, 26, 27, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 77, 78, 79, 80, 81, 83, 84, 87, 89, 92, 93], "ident": 1, "make": [1, 4, 8, 18, 26, 40, 47, 52, 64, 69, 70, 86, 89, 92], "Then": [1, 3, 13, 18, 20, 23, 27, 33, 36, 40, 41, 42, 46, 53, 70, 81, 83, 85], "whose": [1, 14, 44, 53], "unchang": [1, 47, 92], "still": [1, 41, 56, 63], "posit": [1, 3, 17, 18, 21, 38, 42, 44, 45, 46, 56, 81, 86, 87], "ones": [1, 17, 19, 23, 26, 36, 49, 53, 56, 62, 64, 70, 78, 92], "ab": [1, 40, 42, 47, 72], "help": [1, 4, 27, 86, 89, 91, 92, 94], "avoid": [1, 3, 18, 23, 60, 62, 67, 81], "alloc": [1, 2, 30, 60, 67], "memori": [1, 8, 18, 20, 29, 30, 52, 57, 60, 67, 84, 92], "straightforward": [1, 4], "understand": [1, 4, 89, 92], "though": [1, 18, 87], "requir": [1, 33, 47, 56, 89, 92], "some": [1, 3, 4, 6, 18, 20, 27, 29, 30, 36, 37, 39, 40, 41, 45, 47, 48, 53, 62, 66, 67, 76, 80, 81, 84, 86, 89], "sinc": [1, 4, 8, 11, 29, 36, 41, 48, 52, 57, 62, 63, 64, 65, 66, 67, 76, 80, 83, 87, 92], "moreov": [1, 67, 87], "2d": [2, 5, 7, 23, 39], "repres": [2, 4, 26, 33, 38, 40, 41, 58, 60, 62, 66, 68, 74, 78, 83], "90": [2, 4, 26, 40], "degre": 2, "clockwis": 2, "have": [2, 3, 4, 6, 10, 14, 18, 20, 23, 29, 31, 33, 37, 39, 40, 41, 42, 44, 45, 48, 52, 53, 55, 60, 63, 66, 67, 70, 74, 79, 89, 92, 93], "place": [2, 7, 26, 67], "mean": [2, 3, 18, 23, 30, 41, 42, 47, 57, 72, 74, 86], "modifi": [2, 32, 65, 67, 92], "directli": [2, 3, 41, 51, 72], "NOT": 2, "anoth": [2, 13, 23, 41, 43, 48, 62, 63, 66, 67, 76, 80, 81, 92], "15": [2, 10, 24, 26, 36, 45, 57, 66, 78, 86], "14": [2, 47, 78], "16": [2, 41, 42, 44, 45, 47, 51], "20": [2, 10, 66, 80], "squar": [2, 5, 21, 50, 92], "two": [2, 3, 8, 10, 11, 14, 19, 20, 21, 23, 24, 26, 30, 32, 34, 39, 42, 45, 46, 47, 53, 55, 62, 63, 64, 65, 66, 68, 72, 74, 75, 77, 78, 80, 84, 87], "step": [2, 17, 32, 81, 84, 87, 89], "transpos": [2, 7], "mirror": 2, "vertic": [2, 83], "swap": [2, 5, 34, 60, 68], "printmatrix": 2, "exchang": [2, 60], "when": [2, 4, 20, 27, 30, 33, 41, 58, 66, 67, 72, 76, 77, 85, 87, 89, 92], "visit": [2, 24, 42, 48, 71, 93], "over": [2, 5, 41, 81], "one": [2, 8, 10, 13, 14, 17, 18, 20, 21, 23, 26, 27, 29, 31, 32, 33, 35, 36, 37, 39, 43, 44, 45, 47, 48, 49, 52, 55, 58, 60, 62, 63, 71, 74, 76, 77, 78, 81, 83, 84, 85, 86, 87, 92], "half": [2, 8, 64, 66], "long": [3, 21, 37, 39, 56, 87, 92], "flowerb": 3, "plot": 3, "plant": 3, "howev": [3, 26], "cannot": [3, 5, 21, 35, 41, 45], "arrai": [3, 4, 5, 9, 13, 14, 17, 21, 23, 27, 35, 39, 42, 45, 49, 50, 52, 53, 54, 55, 58, 59, 62, 64, 65, 69, 74, 75, 79, 81, 83, 86], "contain": [3, 8, 23, 26, 27, 30, 33, 38, 39, 42, 49, 52, 60, 63, 65, 70, 71, 72, 74, 81, 88], "empti": [3, 13, 23, 31, 33, 55, 60, 66, 70, 71, 72, 78, 81], "new": [3, 20, 30, 33, 49, 55, 56, 58, 60, 66, 78, 89, 92], "violat": [3, 8], "There": [3, 6, 14, 21, 23, 24, 26, 36, 37, 39, 40, 41, 43, 45, 53, 58, 65, 70, 79, 83, 84], "A": [3, 10, 20, 21, 23, 30, 36, 38, 40, 41, 43, 44, 45, 48, 52, 60, 63, 66, 77, 80, 81, 86, 92], "onli": [3, 4, 6, 8, 13, 14, 15, 20, 21, 23, 26, 29, 32, 36, 38, 40, 41, 42, 44, 47, 53, 55, 57, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 76, 77, 89], "condit": [3, 6, 8, 18, 44, 53, 55, 66, 83], "satisfi": [3, 8, 11, 18, 36, 41, 47, 53, 64, 83], "assign": [3, 39, 60], "skip": [3, 4], "canplaceflow": 3, "while": [3, 4, 6, 8, 18, 23, 29, 30, 31, 32, 33, 35, 36, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 62, 63, 67, 68, 70, 72, 74, 80, 81, 83, 84, 85, 86, 87, 92], "els": [3, 4, 8, 11, 17, 23, 24, 30, 31, 33, 39, 57, 62, 63, 67, 68, 71, 72, 74, 78, 80, 83, 85, 86], "endl": [3, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 27, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 62, 63, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86], "front": [3, 57], "write": [3, 29, 40, 44, 89], "few": [3, 65], "here": [3, 27, 32, 41, 65, 70, 78, 81, 89], "see": [3, 36, 37, 41, 49], "method": [3, 23, 67, 70, 72, 78], "answer": [4, 18, 20, 21, 38, 41, 60, 70, 76, 80], "number": [4, 7, 10, 11, 16, 17, 18, 21, 22, 23, 26, 29, 30, 31, 32, 34, 36, 39, 44, 45, 46, 47, 48, 49, 50, 52, 53, 57, 61, 62, 63, 66, 67, 68, 69, 79, 81, 82, 84, 85], "wait": 4, "th": [4, 35, 55, 57, 58, 78, 83, 85], "get": [4, 27, 40, 41, 46, 53, 55, 56, 60, 62, 70, 80, 92], "warmer": 4, "futur": [4, 35, 78, 89], "possibl": [4, 20, 21, 24, 36, 41, 49, 55, 56, 60, 81, 89], "keep": [4, 58, 78, 89, 92], "instead": [4, 26, 30, 41, 56, 57, 67, 68, 81], "73": 4, "74": 4, "75": 4, "71": 4, "69": 4, "72": 4, "76": 4, "30": [4, 19, 55, 66, 78, 85], "40": [4, 26], "60": 4, "each": [4, 13, 18, 19, 20, 23, 31, 33, 35, 38, 39, 42, 46, 47, 53, 55, 56, 57, 60, 62, 65, 67, 71, 74, 79, 81, 83, 84, 92], "find": [4, 7, 11, 13, 15, 18, 20, 21, 24, 27, 29, 35, 41, 44, 45, 48, 49, 52, 53, 57, 58, 62, 69, 76, 81, 82, 83, 86, 92], "closest": 4, "found": [4, 29, 42, 81], "next": [4, 17, 29, 30, 31, 32, 33, 43, 48, 56, 62, 63, 70, 74, 83, 84, 85, 87], "And": [4, 18, 36, 41, 58, 62], "so": [4, 8, 17, 21, 36, 38, 41, 47, 48, 55, 56, 58, 62, 74, 79, 80, 83, 92], "dailytemperatur": 4, "break": [4, 13, 39, 42, 62, 80, 89], "abov": [4, 17, 18, 21, 36, 39, 40, 41, 46, 53, 56, 67, 83], "easi": [4, 78, 89, 92], "knowledg": [4, 89], "tell": 4, "comput": [4, 17, 18, 20, 36, 40, 41, 42, 53, 56, 60, 74, 78, 92], "revers": [4, 33], "order": [4, 18, 24, 31, 32, 33, 37, 39, 45, 47, 49, 57, 58, 60, 67, 68, 71, 74, 80, 81, 86], "more": [4, 14, 17, 23, 36, 39, 41, 47, 60, 64, 65, 67, 74, 81, 87, 89, 92, 93], "suppos": [4, 55], "alreadi": [4, 18, 41, 53, 63, 66, 80], "know": [4, 11, 29, 41, 60, 62, 81], "older": 4, "compar": [4, 39, 62, 73, 82], "chain": [4, 18, 48], "all": [4, 7, 8, 11, 18, 20, 21, 23, 25, 29, 30, 36, 39, 42, 44, 45, 47, 48, 49, 53, 56, 57, 60, 62, 63, 64, 65, 71, 73, 74, 75, 77, 78, 79, 81, 89, 92], "stop": [4, 48], "bigger": [4, 35, 40, 43, 47, 62, 63, 74, 83, 86], "wors": 4, "case": [4, 21, 26, 29, 35, 39, 41, 47, 55, 56, 64, 67, 70, 75, 76, 77, 83, 86, 89], "most": [4, 55, 58, 66, 67, 88, 92], "cooler": 4, "either": [4, 17, 20, 21, 38, 45], "big": [4, 18, 63, 89, 92], "those": [4, 14, 23, 36, 41, 44, 53, 64, 70], "extrem": 4, "give": [4, 29, 35, 41, 76, 78, 83], "huge": 4, "other": [4, 23, 40, 41, 43, 47, 53, 56, 57, 60, 62, 64, 70, 72, 78, 84, 87, 89, 92], "would": [4, 52, 75, 86], "termin": 4, "veri": [4, 15, 26, 41, 60, 80, 87], "soon": 4, "On": [4, 55, 67, 70, 72, 78], "hand": [4, 70, 72, 78], "quickli": 4, "nlogn": [4, 39, 47, 55, 58, 62, 65, 75, 86], "improv": [4, 18, 89, 91, 92, 94], "particular": [4, 92], "achiev": [4, 35, 45], "flip": 5, "diagon": 5, "switch": 5, "column": [5, 20, 21, 50, 57], "mt": 5, "might": [5, 18, 30, 33, 44, 49, 56, 62, 67, 70, 74, 76, 78, 81, 86], "just": [5, 14, 18, 26, 42, 60, 71, 72, 80, 92, 93], "arr": [6, 56], "recal": [6, 80], "follow": [6, 10, 17, 23, 24, 29, 36, 42, 43, 44, 45, 48, 51, 56, 68, 72, 74, 75, 77, 78, 79, 84, 85, 86, 89], "we": [6, 11, 18, 20, 23, 26, 37, 41, 47, 48, 51, 55, 63, 66, 68, 70, 77, 79, 80, 81, 87], "implement": [6, 13, 20, 41, 57, 58, 66, 92], "validmountainarrai": 6, "shift": 7, "grid": [7, 20, 21], "disappear": 7, "rotat": 7, "imag": 7, "flower": 7, "daili": 7, "temperatur": 7, "valid": [7, 26, 36, 73, 74, 76, 81, 82], "mountain": 7, "consist": [8, 15, 36, 38, 40, 42, 56, 70, 71, 74, 75, 76, 77, 78, 79, 81], "everi": [8, 13, 17, 18, 23, 32, 41, 66, 74, 80, 81], "appear": [8, 36, 40, 62, 63, 64, 65, 67, 81], "exactli": [8, 24, 27, 56, 57, 75, 81], "twice": [8, 13, 67, 84], "except": [8, 13, 33, 65], "onc": [8, 13, 65, 75, 89], "your": [8, 20, 30, 35, 56, 58, 63, 66, 67, 75, 89, 91, 92, 93, 94], "must": [8, 13, 29, 32, 35, 37, 43, 47, 49, 57, 67, 71, 76, 77, 78], "run": [8, 29, 54, 68, 72, 84, 89, 92], "log": [8, 18, 57], "singlenondupl": 8, "let": [8, 11, 20, 21, 33, 36, 37, 40, 41, 44, 45, 47, 56, 63, 85, 91, 94], "u": [8, 21, 23, 33, 36, 37, 40, 41, 45, 47, 60], "divid": [8, 18, 43, 64], "halv": 8, "belong": [8, 11], "right": [8, 10, 11, 20, 21, 26, 44, 57, 62, 70, 74, 76, 77, 83, 86], "left": [8, 10, 11, 20, 21, 26, 55, 57, 62, 70, 74, 83, 86], "convers": [8, 35], "middl": [8, 21, 88], "even": 8, "equal": [8, 14, 20, 21, 27, 45, 50, 54, 57, 62, 63, 64, 72, 74], "somewher": 8, "mid": [8, 47, 57, 64], "sure": [8, 47, 64, 89], "logn": [8, 11, 41, 43, 44, 56, 57, 65, 66], "sort": [9, 18, 34, 39, 47, 50, 59, 62, 66, 81], "root": [10, 11], "node": [10, 11, 24, 31, 33, 34, 88], "along": [10, 84, 93], "longest": [10, 18, 45, 48, 82], "path": [10, 22, 23, 25], "down": [10, 20, 21, 40, 44, 83, 89], "farthest": 10, "leaf": 10, "null": [10, 11, 29, 58, 66, 84], "val": [10, 11, 29, 30, 31, 32, 33, 58, 84, 85, 87], "recurs": [10, 23, 36, 41, 44], "relationship": [10, 17, 18, 20, 21, 36, 37, 49], "between": [10, 11, 18, 21, 23, 31, 32, 36, 37, 45, 46, 47, 49, 57, 74, 80, 81, 85], "children": [10, 11], "maxdepth": 10, "max": [10, 16, 27, 33, 35, 38, 42, 48, 52, 56, 62, 72, 74, 76, 81, 83, 86], "struct": [10, 11, 29, 30, 31, 32, 33, 66, 84, 85, 87], "treenod": [10, 11], "nullptr": [10, 11, 29, 30, 31, 32, 33, 84, 85, 87], "fifteen": 10, "seven": [10, 11, 26, 67], "twenti": 10, "nine": [10, 11, 26], "three": [10, 11, 30, 32, 33, 41, 50, 53, 84, 85, 87], "bst": 11, "lca": 11, "accord": [11, 58], "definit": [11, 48], "wikipedia": 11, "defin": [11, 39, 48, 51, 58, 77, 79], "q": [11, 55, 56, 57, 60], "t": [11, 60, 72], "ha": [11, 20, 23, 27, 30, 35, 44, 52, 55, 57, 58, 62, 65, 68, 70, 72, 78, 83, 84, 87, 92, 93], "both": [11, 18, 20, 31, 33, 55, 63, 66, 72, 74, 81, 84], "descend": 11, "allow": [11, 35, 51, 81, 92], "itself": [11, 33, 41, 48, 49], "explan": [11, 14, 17, 18, 19, 20, 21, 23, 24, 26, 27, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 51, 52, 55, 56, 57, 58, 62, 63, 66, 67, 68, 70, 72, 74, 76, 78, 79, 80, 81, 83, 84, 86, 87, 91, 94], "uniqu": [11, 16, 18, 22, 23, 24, 27, 48, 49, 62, 66, 67, 69, 70, 82], "note": [11, 18, 35, 36, 45, 57, 58, 63, 68], "branch": 11, "lowestcommonancestor": 11, "zero": [11, 31, 33, 38, 42, 45, 74, 84], "five": [11, 26, 29, 30, 32, 33, 67, 85, 87], "four": [11, 26, 29, 30, 32, 41, 50, 84, 85, 87], "eight": [11, 29], "six": [11, 26, 29, 33, 87], "height": [11, 83], "maximum": [12, 14, 28, 35, 47, 50, 54, 57, 67, 83], "depth": 12, "lowest": 12, "common": [12, 66], "ancestor": 12, "search": [12, 58, 81], "linear": [13, 64, 67], "constant": [13, 57, 65, 72, 81, 84], "how": [13, 20, 29, 36, 44, 47, 62, 75, 92], "mani": [13, 20, 36, 40, 41, 53, 56, 92], "unordered_map": [13, 14, 15, 18, 26, 27, 29, 41, 53, 60, 64, 75, 76, 80, 81, 84], "singlenumb": 13, "pair": [13, 16, 18, 31, 34, 42, 66, 71], "second": [13, 39, 41, 45, 47, 53, 66, 76, 78, 87], "also": [13, 18, 39, 66, 70, 72, 78, 89, 91, 92, 94], "xor": 13, "cancel": 13, "out": [13, 89, 92], "duplic": [13, 23, 48, 49, 69, 73], "remain": [13, 29, 36, 45, 56, 62, 63, 70], "pick": [14, 31, 45, 92], "remov": [14, 34, 69, 73, 78, 88], "them": [14, 18, 23, 24, 29, 37, 39, 42, 45, 46, 55, 70, 74, 91, 94], "up": [14, 17, 29, 38, 43, 44, 45, 62, 68, 72, 75, 81, 84, 85, 86, 89], "henc": [14, 67], "total": [14, 17, 20, 36, 39, 47, 53, 63, 78], "map": [14, 18, 27, 29, 40, 42, 48, 60, 75, 79, 80, 81], "initi": [14, 21, 58, 66], "enough": [14, 41], "eras": [14, 27, 62, 71, 72, 81], "maxoper": 14, "repeat": [15, 20, 56, 65, 82], "leetcod": [15, 77, 81, 91, 94], "loveleetcod": 15, "aabb": 15, "lowercas": [15, 42, 63, 72, 75, 77, 79, 80, 81], "english": [15, 40, 42, 62, 63, 70, 75, 76, 77, 79, 80, 81], "letter": [15, 40, 61, 62, 63, 72, 76, 77, 79, 80, 81], "firstuniqchar": 15, "char": [15, 26, 38, 40, 42, 60, 63, 71, 72, 74, 75, 76, 77, 79, 80, 81], "c": [15, 26, 40, 42, 60, 62, 63, 66, 71, 72, 75, 77, 78, 79, 80, 86, 91, 92, 94], "larger": [15, 80, 92], "26": [15, 40, 42, 63, 75, 79, 80], "sum": [16, 17, 19, 27, 33, 38, 41, 52, 59, 74, 78], "charact": [16, 26, 42, 69, 70, 71, 72, 74, 77, 82], "string": [16, 26, 37, 38, 40, 42, 50, 60, 63, 71, 73, 74, 76, 77, 78, 79, 80, 81], "top": [17, 20, 21, 56, 57, 58, 71, 92], "bottom": [17, 20, 21], "adjac": [17, 23, 32, 73], "below": [17, 20, 36, 60, 79], "formal": [17, 23, 67], "current": [17, 56, 63], "look": [17, 36, 37, 62, 67, 87, 92], "like": [17, 20, 36, 39, 42, 60, 62, 70, 74, 77, 78, 81, 87, 92], "underlin": [17, 68], "200": [17, 68, 72], "mintot": 17, "min": [17, 35, 41, 83, 86], "algorithm": [17, 18, 23, 24, 30, 35, 41, 47, 48, 56, 57, 58, 60, 62, 63, 64, 65, 68, 75, 86, 89], "minimumtot": 17, "resiz": 17, "min_el": [17, 35], "depend": [17, 30, 83], "previou": [17, 18, 20, 32, 53, 56, 62, 71, 78], "set": [18, 23, 48, 49, 56, 68, 81, 92], "distinct": [18, 57, 58], "multipl": [18, 59, 92], "accept": 18, "b": [18, 23, 27, 39, 40, 41, 42, 45, 60, 62, 63, 70, 72, 76, 79, 80, 81, 86], "call": [18, 19, 27, 38, 41, 42, 45, 48, 58, 63, 64, 66, 67, 79], "mathemat": [18, 20, 36, 41, 48, 92], "written": [18, 26, 41, 79, 91, 94], "symmetri": 18, "criteria": [18, 57], "befor": [18, 26, 27, 35, 36, 40, 48, 60, 62, 89, 92], "try": [18, 20, 40, 89], "were": [18, 30, 49, 53], "among": [18, 74, 79], "That": [18, 19, 27, 29, 36, 39, 41, 45, 56, 64, 76, 86], "lead": [18, 33, 36, 38, 40, 41, 48, 56, 74, 76, 92], "unnecessari": 18, "recomput": [18, 20], "brief": 18, "_map": 18, "largestdivisiblesubsetof": 18, "largestdivisiblesubset": 18, "printsolut": 18, "brute": 18, "forc": 18, "save": [18, 92], "eventu": 18, "through": [18, 87, 89, 92], "i0": [18, 21], "i1": 18, "in1": 18, "iN": 18, "pre": [18, 30, 56, 85], "prev": [18, 32], "last": [18, 29, 45, 49, 53, 59, 68, 70, 78, 86], "divisor": 18, "maxsiz": 18, "maxindex": 18, "subsets": 18, "biggest": [18, 43, 58, 83], "updat": [18, 32, 56], "interest": [18, 41, 57, 64, 76], "simplifi": 18, "everyth": [18, 81], "commonli": 19, "denot": [19, 32, 68], "f": [19, 60], "form": [19, 27, 36, 37, 41, 45, 75, 81, 83, 92], "sequenc": [19, 45], "preced": 19, "calcul": [19, 33, 41], "fib": 19, "f0": 19, "f1": 19, "f2": 19, "robot": [20, 21], "locat": [20, 21, 44], "corner": [20, 21], "mark": [20, 21], "diagram": 20, "point": [20, 21, 46, 84], "reach": [20, 21, 85, 87], "finish": 20, "28": [20, 40], "guarante": [20, 24, 26, 33, 57, 58, 70, 78], "At": [20, 55, 58, 66, 78], "want": [20, 27, 32, 35, 36, 39, 52, 55, 58, 81, 83, 86, 91, 92, 94], "uniquepath": 20, "lot": [20, 41], "wa": [20, 29, 41, 49, 53, 80, 92], "what": [20, 47, 57, 60, 67, 75, 86, 93], "been": [20, 27, 70, 89, 93], "dp": 20, "rephras": [20, 53], "insid": [20, 68], "old": 20, "am": 20, "wonder": 20, "behind": [20, 41, 92], "pleas": 20, "share": [20, 29, 42, 91, 92, 93, 94], "formula": [20, 40], "tri": 21, "obstacl": 21, "respect": [21, 67, 68, 74], "take": [21, 39, 66, 89, 92, 93], "test": [21, 29, 43, 81, 89, 92], "obstaclegrid": 21, "3x3": 21, "col": [21, 57], "np": 21, "As": [21, 92], "otherwis": [21, 29, 39, 40, 41, 43, 44, 56, 62, 66, 71, 74, 75, 77, 84], "j0": 21, "similarli": [21, 36, 49, 86], "uniquepathswithobstacl": 21, "triangl": 22, "largest": [22, 26, 52, 59], "divis": 22, "subset": [22, 50], "fibonacci": 22, "ii": [22, 26, 36, 50, 69, 73], "undirect": 23, "edg": [23, 24, 89], "properti": [23, 47, 58], "self": [23, 24], "parallel": 23, "connect": [23, 30], "partit": [23, 50], "independ": 23, "differ": [23, 35, 45, 46, 47, 57, 63, 75, 79, 81, 89, 92], "df": 23, "compon": 23, "dure": [23, 41, 70], "travers": 23, "same": [23, 26, 36, 37, 47, 48, 56, 62, 63, 66, 67, 70, 71, 74, 77, 80, 81, 92], "isbipartit": 23, "continu": [23, 41, 48, 53, 71, 72, 81, 88, 89, 93], "pop_back": [23, 24, 70, 72, 78], "stack": [23, 70, 78], "data": [23, 58, 70, 72, 78, 92], "structur": [23, 29, 58, 70, 72, 78, 89, 92], "push": [23, 55, 56, 57, 58, 71, 72], "pop": [23, 55, 56, 57, 58, 71, 72], "similar": [23, 91, 92, 94], "well": 23, "direct": 24, "acycl": 24, "graph": 24, "dag": 24, "label": 24, "allpathssourcetarget": 24, "printpath": 24, "bipartit": 25, "sourc": 25, "target": [25, 59], "numer": [26, 56, 74, 78], "symbol": [26, 76], "l": [26, 27, 33, 60, 80], "d": [26, 38, 40, 42, 60, 62, 70, 72, 78, 86, 91, 94], "500": [26, 74], "ad": [26, 48, 58, 60, 66, 72], "togeth": [26, 31, 55, 70, 83, 91, 94], "xii": 26, "simpli": 26, "27": [26, 37, 40, 43, 78], "xxvii": 26, "xx": 26, "smallest": [26, 55, 58, 59], "iiii": 26, "iv": 26, "subtract": [26, 56], "principl": [26, 65], "ix": 26, "instanc": [26, 48], "400": 26, "900": 26, "convert": [26, 55, 74], "iii": [26, 36], "lviii": 26, "58": 26, "mcmxciv": 26, "1994": 26, "cm": 26, "xc": 26, "3999": 26, "treat": [26, 30, 74], "iter": [26, 27, 29], "backward": [26, 83], "romantoint": 26, "small": [26, 60], "subarrai": [27, 54, 88], "score": [27, 78], "contigu": [27, 52], "subsequ": [27, 50, 76], "17": [27, 45, 51], "identifi": [27, 31, 32, 41, 47, 86, 92], "decid": [27, 83], "maximumuniquesubarrai": 27, "maxsum": [27, 52], "roman": 28, "erasur": [28, 72], "head": [29, 31, 32, 33, 84, 85, 87], "singli": [29, 87], "heada": 29, "headb": 29, "c1": 29, "cycl": [29, 48, 88], "anywher": 29, "entir": [29, 45], "retain": 29, "lista": 29, "listb": 29, "No": [29, 42], "determin": [29, 67, 71, 84, 92], "none": [29, 53], "listnod": [29, 30, 31, 32, 33, 84, 85, 87], "getintersectionnod": 29, "one1": [29, 31], "four1": [29, 31, 33], "one2": [29, 31], "six2": 29, "five2": 29, "one12": 29, "nine1": [29, 33], "one11": 29, "three2": [29, 31], "tail": 29, "inform": 29, "hint": [29, 41], "until": [29, 56, 70, 71], "lengtha": 29, "nodea": 29, "lengthb": 29, "nodeb": 29, "techniqu": [29, 41, 42, 85, 89, 91, 92, 94], "known": [29, 92], "pointer": [29, 30], "removeel": 30, "sixb": 30, "sixa": 30, "newhead": 30, "seven4": 30, "seven3": 30, "seven2": 30, "seven1": 30, "prehead": [30, 33], "2023": 30, "real": [30, 66, 92], "situat": 30, "practic": [30, 91, 92, 94], "dealloc": 30, "especi": 30, "2022": 30, "delet": [30, 45, 69, 70], "adapt": [30, 75], "Be": 30, "care": [30, 63, 67], "leak": 30, "link": [31, 32, 33, 85, 88], "list1": 31, "list2": 31, "should": [31, 48, 52, 67, 68, 76, 83], "made": [31, 58, 66, 70, 89, 91, 94], "splice": 31, "decreas": [31, 45, 57, 67, 68], "smaller": [31, 41, 52, 62, 86, 89], "append": [31, 49], "mergetwolist": 31, "two1": 31, "four2": [31, 33], "newon": 31, "z": [31, 40, 41, 42, 46, 60, 77, 81], "solv": [32, 41, 43, 44, 45, 56, 57, 64, 70, 78, 84, 86, 89, 91, 92, 94], "themselv": 32, "chang": [32, 41, 56, 67, 92], "draw": 32, "pictur": 32, "correct": [32, 71, 89], "cur": 32, "swappair": 32, "prenod": 32, "curnod": 32, "nextnod": 32, "digit": [33, 60, 74, 76], "l1": 33, "l2": 33, "342": 33, "465": 33, "807": 33, "school": 33, "loss": 33, "extend": [33, 60], "longer": [33, 40, 70, 74, 86], "addtwonumb": 33, "dummi": 33, "hook": 33, "shorter": [33, 74, 83], "newnod": 33, "zero1": 33, "zero2": 33, "nine0": 33, "nine2": 33, "nine3": 33, "nine4": 33, "nine5": 33, "nine6": 33, "nine7": 33, "nine8": 33, "nine9": 33, "nine10": 33, "intersect": [34, 66], "merg": [34, 69, 70], "add": [34, 58, 60, 66, 78, 81], "dai": 35, "maxim": 35, "profit": 35, "choos": [35, 36, 39, 43, 44, 47, 53, 55, 56, 70], "transact": 35, "done": [35, 56], "maxprofit": 35, "past": [35, 78], "imax": 35, "max_el": [35, 56], "imin": 35, "distanc": [35, 50, 85], "minimum": [35, 41, 50, 57, 69], "minpric": 35, "lexicograph": 36, "come": [36, 68, 92], "alphabet": [36, 62, 75, 79], "aa": [36, 40, 42, 70], "ae": [36, 60], "ai": 36, "ao": 36, "au": 36, "ee": 36, "ei": 36, "eo": 36, "eu": 36, "io": 36, "iu": 36, "oo": 36, "ou": 36, "uu": 36, "ea": 36, "33": [36, 74], "66045": 36, "alwai": [36, 45, 48, 56, 58, 62, 64, 76, 77, 78, 85, 89], "uuu": 36, "ooo": 36, "oou": 36, "ouu": 36, "iio": 36, "iiu": 36, "ioo": 36, "iou": 36, "iuu": 36, "eee": [36, 70], "eei": 36, "eeo": 36, "eeu": 36, "eii": 36, "eio": 36, "eiu": 36, "eoo": 36, "eou": 36, "euu": 36, "aaa": [36, 40, 42], "aae": 36, "aai": 36, "aao": 36, "aau": 36, "aee": 36, "aei": 36, "aeo": 36, "aeu": 36, "aii": 36, "aio": 36, "aiu": 36, "aoo": 36, "aou": 36, "auu": 36, "35": 36, "ignor": [36, 63, 68, 74], "short": 36, "line": [36, 83], "precis": [36, 65], "countvowelstr": 36, "combinator": 36, "separ": [36, 81], "group": [36, 48, 64], "becom": [36, 58, 70, 72, 89, 92], "put": [36, 39, 92], "binomi": 36, "coeffici": 36, "24": 36, "decim": [37, 38], "represent": [37, 42], "correspond": [37, 40, 46, 71, 74], "11011": 37, "505379714": 37, "1101110010111011110001001101010111100": 37, "118505380540": 37, "110": 37, "dec": 37, "num_bit": 37, "equat": 37, "cmath": [37, 41], "concatenatedbinari": 37, "unsign": [37, 56], "log2": 37, "1000000007": 37, "101": 38, "1100": 38, "112": 38, "3001": 38, "32": [38, 74], "82734": 38, "27346209830709182346": 38, "obtain": [38, 45, 49, 51], "turn": [38, 41, 55, 56], "11111": 38, "10111": 38, "10101": 38, "10100": 38, "10000": [38, 44, 52], "minpartit": 38, "maxdigit": 38, "amount": [39, 83], "box": 39, "onto": 39, "boxtyp": 39, "numberofboxes_i": 39, "numberofunitsperbox_i": 39, "type": [39, 71, 72], "trucksiz": 39, "exce": [39, 40, 43], "third": [39, 58, 76, 87], "91": 39, "maximumunit": 39, "base": 39, "maxunit": 39, "why": [39, 64], "But": [39, 41, 47, 57, 60, 70, 72, 76, 78, 87], "comparison": [39, 58], "dictionari": 39, "default": [39, 58], "columntitl": 40, "titl": [40, 41, 92], "zy": 40, "701": 40, "uppercas": [40, 77], "fxshrxw": 40, "az": 40, "52": 40, "zz": 40, "702": 40, "703": 40, "rewritten": 40, "abcd": [40, 42, 70], "expon": 40, "titletonumb": 40, "ascii": 40, "65": 40, "64": [40, 44], "seri": [40, 79], "minu": 40, "parenthes": [40, 73], "around": [40, 57], "limit": 40, "substract": 40, "least": [41, 52, 58, 74, 78], "word": [41, 47, 50, 62, 64, 75, 77, 80, 82], "product": [41, 50, 92], "numsquar": 41, "etc": [41, 87], "gotten": 41, "match": [41, 71, 80], "process": [41, 71, 91, 92, 94], "best": [41, 50, 91, 93, 94], "cach": 41, "nsq": 41, "sq": 41, "sqrt": 41, "good": [41, 63], "who": [41, 91, 94], "theorem": 41, "lagrang": 41, "state": [41, 56], "natur": 41, "proven": 41, "1770": 41, "our": 41, "Not": 41, "legendr": 41, "express": [41, 87], "nonneg": 41, "issquar": 41, "power": [41, 49, 50], "littl": 41, "algebra": 41, "prove": [41, 45, 47], "reduc": [41, 47, 64, 67, 89, 92], "fact": [41, 47], "y": [41, 43, 46, 55, 60, 76, 81], "affect": [41, 78], "challeng": [41, 91, 92, 93, 94], "about": [41, 63, 67, 93], "amaz": 41, "peopl": 41, "someth": [41, 81, 89, 92], "hope": [41, 89, 92, 93], "learn": [41, 89, 91, 92, 94], "fun": [41, 57, 89, 92, 93], "abcw": 42, "baz": 42, "foo": 42, "bar": 42, "xtfn": 42, "abcdef": 42, "abc": [42, 76, 80], "cd": [42, 60], "bcd": 42, "aaaa": 42, "maxproduct": 42, "maxp": 42, "avg": 42, "25": [42, 66], "bitwis": 42, "AND": [42, 44, 46], "00010000000000000000000111": 42, "10000000000000000000000011": 42, "00000000000000000000000011": 42, "31": [43, 44, 46, 64], "ispowerofthre": 43, "1162261467": 43, "2147483648": 43, "ispoweroffour": 44, "pattern": [44, 82], "1000000": 44, "256": 44, "100000000": 44, "notic": [44, 76, 83], "odd": 44, "formul": 44, "complet": [44, 89], "opposit": 44, "01": [44, 74], "never": [44, 84], "0x55555555": 44, "hexadecim": 44, "0101": 44, "success": 45, "strictli": 45, "altern": 45, "trivial": 45, "contrast": [45, 92], "possibli": 45, "leav": [45, 67], "sever": [45, 78, 92], "minima": 45, "maxima": 45, "extremum": 45, "monoton": 45, "increas": [45, 47, 92], "wigglemaxlength": 45, "sign": [45, 81], "arrow": 46, "hammingdist": 46, "increment": 47, "decrement": 47, "rememb": [47, 62, 89, 93], "ask": [47, 92], "unsort": [47, 64, 88], "sai": [47, 65], "ascend": [47, 57, 86], "appar": 47, "greater": [47, 58, 63, 64], "argument": 47, "Its": [47, 92], "averag": [47, 55, 67], "minmoves2": 47, "fulli": 47, "partial": 47, "matter": [47, 67], "permut": [48, 80], "build": [48, 70, 80], "subject": 48, "rule": [48, 78, 81], "occur": 48, "rearrang": 48, "cyclic": 48, "factor": 48, "consid": [48, 66, 74, 89, 91, 94], "construct": [48, 49, 59, 60, 70, 72], "unus": 48, "arraynest": 48, "maxlen": [48, 76], "len": 48, "powerset": 49, "addit": [49, 60, 92], "These": [49, 89, 92], "newsubset": 49, "bui": 50, "sell": 50, "stock": 50, "vowel": 50, "consecut": 50, "binari": 50, "Into": 50, "Of": 50, "deci": 50, "unit": 50, "truck": 50, "excel": 50, "sheet": 50, "perfect": 50, "wiggl": 50, "ham": 50, "runningsum": 51, "part": [52, 67, 81, 89], "23": [52, 60], "prefix": 52, "maxsubarrai": 52, "currsum": 52, "subarraysum": 53, "deduct": 53, "rewrit": [53, 62], "inner": 53, "check": [53, 62, 66, 67], "fast": [53, 85], "sumi": 53, "1d": 54, "plai": 55, "game": [55, 82], "smash": 55, "destroi": 55, "combin": [55, 61, 81], "thing": 55, "priority_queu": [55, 57, 58], "queue": [55, 56, 57], "laststoneweight": 55, "worst": [55, 67], "procedur": 56, "imposs": [56, 67], "creat": [56, 92], "redo": 56, "isposs": 56, "accumul": [56, 74, 78], "pmax": 56, "import": [56, 92], "usag": [56, 77, 92], "better": [57, 70, 78, 89, 92], "8th": 57, "300": 57, "too": [57, 83, 92], "advanc": [57, 92], "interview": [57, 89, 92], "read": [57, 89, 93], "paper": 57, "explain": [57, 92], "kthsmallest": 57, "2logn": 57, "scratch": 57, "purpos": 57, "logk": 57, "somehow": 57, "upper_bound": 57, "countlessorequ": 57, "nlognlogm": 57, "design": [58, 92], "class": [58, 66], "kthlargest": 58, "object": [58, 66], "whenev": [58, 66, 76], "_num": 58, "_k": 58, "public": [58, 66], "By": [58, 89, 91, 92, 94], "_q": 58, "stone": 59, "weight": 59, "kth": 59, "stream": 59, "inclus": [60, 65], "telephon": 60, "button": 60, "af": 60, "bd": 60, "bf": 60, "ce": 60, "cf": 60, "g": 60, "h": 60, "w": [60, 79, 80], "string_view": 60, "newresult": 60, "lettercombin": 60, "copi": 60, "content": [60, 92, 93], "phone": 61, "li": 62, "ri": 62, "therefor": [62, 92], "conver": 62, "inlin": 62, "iscov": 62, "removecoveredinterv": 62, "erase_i": 62, "appl": 62, "candi": 62, "anim": 62, "standard": [62, 79], "librari": 62, "bound": [62, 92], "simpler": 62, "exact": [62, 70], "maxright": 62, "preleft": 62, "aab": 63, "aaabbbcc": 63, "aaabcc": 63, "aaabbc": 63, "ceabaacb": 63, "eabaab": 63, "goal": 63, "ceaacbb": 63, "freq": [63, 64], "mindelet": 63, "currentfreq": 63, "majorityel": 64, "nth_element": 64, "cost": [64, 81, 92], "full": [64, 79], "finddupl": 65, "due": 65, "pigeonhol": 65, "pigeon": 65, "hole": 65, "100001": 65, "program": [66, 89, 91, 92, 94], "event": 66, "caus": [66, 70], "doubl": [66, 78], "book": [66, 89, 91, 92, 93, 94], "happen": 66, "moment": 66, "open": [66, 71], "interv": [66, 69], "mycalendar": 66, "boolean": 66, "successfulli": 66, "privat": 66, "_event": 66, "mind": [66, 89], "eventcmp": 66, "lh": 66, "rh": 66, "rel": [67, 87], "kept": 67, "languag": 67, "hold": [67, 77], "beyond": 67, "slot": 67, "_": 67, "being": [67, 74], "underscor": 67, "further": 67, "removedupl": [67, 70], "expect": [67, 92], "invari": 67, "satisifi": 67, "nums2": 68, "accommod": 68, "fit": 68, "cover": [69, 89, 92], "frequenc": 69, "major": 69, "my": [69, 81, 91, 92, 93, 94], "calendar": 69, "side": 70, "substr": [70, 81, 82], "repeatedli": 70, "noth": 70, "deeedbbcccbdaa": 70, "ccc": [70, 80], "ddbbbdaa": 70, "bbb": 70, "dddaa": 70, "ddd": 70, "pbbcggttciiippooaai": 70, "lower": [70, 92], "built": 70, "dd": 70, "bb": 70, "stk": [70, 71, 78], "str": 70, "reason": [70, 78, 92], "had": [70, 78], "faster": [70, 81, 84, 85, 87, 89], "bracket": 71, "close": 71, "parenthesi": 71, "isvalid": 71, "text": 72, "editor": 72, "ac": 72, "cleanstr": 72, "backspacecompar": 72, "constructor": 72, "ye": 72, "simplest": 72, "backspac": 73, "version1": 74, "version2": 74, "revis": 74, "join": 74, "dot": [74, 79, 81], "leftmost": 74, "001": 74, "specifi": 74, "tovector": 74, "stoi": [74, 78], "comparevers": 74, "revisions1": 74, "revisions2": 74, "remain1": 74, "remain2": 74, "firstit": 74, "lastit": 74, "initvalu": 74, "phrase": 75, "typic": 75, "nagaram": 75, "rat": 75, "car": 75, "isanagram": 75, "replac": [75, 82], "abcabcbb": 76, "bbbbb": 76, "pwwkew": 76, "wke": 76, "pwke": 76, "meet": [76, 84], "nonrep": 76, "show": 76, "babba": 76, "ba": 76, "abb": [76, 80], "repetit": 76, "latter": 76, "this_start": 76, "previous_start": 76, "lengthoflongestsubstr": 76, "usa": 77, "googl": [77, 92], "flag": 77, "rest": 77, "isvalidcas": 77, "islow": 77, "detectcapitalus": 77, "strang": 78, "round": 78, "record": 78, "op": 78, "invalid": 78, "calpoint": 78, "access": [78, 92], "intern": 79, "encod": 79, "dash": 79, "conveni": 79, "tabl": 79, "cab": 79, "gin": 79, "zen": 79, "gig": 79, "msg": 79, "unordered_set": [79, 81], "uniquemorserepresent": 79, "desir": [80, 89], "deq": 80, "mee": 80, "aqq": 80, "dkd": 80, "findandreplacepattern": 80, "w_to_p": 80, "p_to_w": 80, "clear": 80, "yet": 80, "local": 81, "name": [81, 89], "domain": 81, "besid": 81, "alic": 81, "com": [81, 91, 92, 93, 94], "period": 81, "mail": 81, "sent": 81, "forward": [81, 83], "alicez": 81, "plu": 81, "certain": 81, "filter": 81, "send": 81, "actual": 81, "receiv": [81, 89, 92], "alex": 81, "bob": 81, "cathi": 81, "testemail": 81, "david": 81, "lee": 81, "tcode": 81, "suffix": 81, "describ": [81, 92], "extract": 81, "numuniqueemail": 81, "apo": 81, "npo": 81, "leet": 81, "po": 81, "unless": 81, "kei": 81, "unord": 81, "hash": 81, "lookup": 81, "blindli": 81, "lazili": 81, "specif": 81, "version": 82, "anagram": 82, "detect": 82, "capit": 82, "basebal": 82, "mors": 82, "code": [82, 91, 93, 94], "email": [82, 93], "address": 82, "drawn": 83, "endpoint": 83, "axi": 83, "slant": 83, "49": 83, "area": [83, 92], "blue": 83, "section": 83, "maxarea": 83, "maxa": 83, "broadest": 83, "narrow": 83, "higher": 83, "18": 83, "hascycl": 84, "imagin": 84, "slower": [84, 85, 87], "sz": 85, "pass": 85, "removenthfromend": 85, "printlist": 85, "runner": 85, "slow": 85, "whole": 86, "sortednum": 86, "findunsortedsubarrai": 86, "mlogm": 86, "middlenod": 87, "goe": 87, "approach": [87, 89, 91, 94], "nice": 87, "suitabl": 87, "quarter": 87, "recommend": 87, "seem": 87, "readabl": [87, 89], "scalabl": [87, 92], "maintain": [87, 92], "water": 88, "nth": 88, "shortest": 88, "congratul": 89, "enjoi": 89, "solut": [89, 91, 92, 94], "present": 89, "skill": [89, 91, 92, 94], "problem": [89, 91, 92, 94], "abil": [89, 92], "logic": [89, 92], "think": [89, 92, 93], "creativ": [89, 92], "expos": 89, "broaden": 89, "world": [89, 92], "undoubtedli": 89, "benefit": 89, "endeavor": 89, "engag": 89, "stai": 89, "date": 89, "latest": 89, "technologi": [89, 92], "trend": 89, "prepar": [89, 92], "technic": [89, 92], "crucial": 89, "land": 89, "job": [89, 92], "encourag": 89, "explor": 89, "discov": 89, "yourself": 89, "hard": [89, 92], "work": [89, 92], "dedic": 89, "expert": [89, 92], "valuabl": [89, 92, 93], "asset": 89, "team": 89, "carefulli": 89, "jump": 89, "statement": 89, "constraint": 89, "special": 89, "plan": 89, "pseudocod": 89, "sketch": 89, "high": 89, "level": 89, "thoroughli": 89, "produc": 89, "larg": 89, "unusu": 89, "scenario": [89, 92], "robust": 89, "complex": 89, "notat": [89, 92], "clean": 89, "meaning": 89, "variabl": 89, "indent": 89, "properli": 89, "comment": 89, "necessari": 89, "programm": [89, 91, 92, 94], "prevent": [89, 92], "error": [89, 92], "bug": [89, 92], "submit": 89, "feedback": [89, 92], "review": 89, "pai": 89, "attent": 89, "great": [89, 92], "manner": 89, "prioriti": [], "dynam": [], "welcom": 92, "ll": 92, "excit": [92, 93], "whether": 92, "re": 92, "beginn": 92, "experienc": 92, "enhanc": 92, "develop": 92, "showcas": 92, "innov": 92, "offer": 92, "divers": 92, "puzzl": 92, "riddl": 92, "wide": 92, "topic": 92, "confid": 92, "easili": 92, "chose": 92, "difficult": 92, "effort": 92, "detail": [91, 92, 94], "blog": [92, 93], "leetsolv": [92, 93], "select": [], "compil": [], "popular": 92, "onlin": 92, "platform": [91, 92, 94], "softwar": 92, "engin": 92, "provid": [91, 92, 94], "websit": 92, "launch": 92, "2015": 92, "grown": 92, "resourc": 92, "databas": 92, "system": 92, "industri": 92, "simul": 92, "user": 92, "gain": 92, "experi": [92, 93], "featur": 92, "stand": 92, "extens": 92, "discuss": 92, "forum": 92, "interact": 92, "foster": 92, "commun": [91, 92, 94], "collabor": 92, "clarif": 92, "premium": 92, "servic": 92, "mock": 92, "compani": 92, "career": 92, "coach": 92, "post": 92, "sharpen": 92, "screen": 92, "evalu": 92, "potenti": 92, "candid": 92, "secur": 92, "microsoft": 92, "facebook": 92, "summari": 92, "collect": 92, "measur": 92, "grow": [91, 92, 94], "essenti": 92, "concept": 92, "scienc": 92, "term": 92, "upper": 92, "exampl": 92, "proport": 92, "2": 92, "analyz": 92, "bottleneck": 92, "accordingli": 92, "execut": 92, "balanc": 92, "highli": 92, "aspect": 92, "firstli": 92, "particularli": 92, "project": 92, "codebas": 92, "confus": 92, "secondli": 92, "fix": 92, "issu": 92, "reliabl": 92, "thirdli": 92, "overal": 92, "qualiti": 92, "monei": 92, "conclus": 92, "free": [91, 92, 94], "focus": 92, "enjoy": 92, "educ": 92, "inspir": 92, "readi": 92, "embark": 92, "reward": 92, "journei": [92, 93], "luck": 93, "love": [91, 93, 94], "hear": 93, "drop": 93, "nhut": [91, 93, 94], "nhutnguyen": [91, 93, 94], "thought": [91, 93, 94], "tree": [], "thank": [], "passion": [91, 94], "variou": [91, 94], "aspir": [91, 94], "hobbyist": [91, 94], "profession": [91, 94], "believ": [], "struggl": [], "insight": [91, 94], "assumpt": [91, 94], "trade": [91, 94], "off": [91, 94], "anyon": [], "subscrib": [], "regular": [], "feel": [], "suggest": [], "nguyen": [91, 94], "ph": [91, 94], "hi": [91, 94], "contact": [], "me": []}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"shift": 0, "2d": 0, "grid": 0, "problem": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "statement": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "exampl": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "1": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90], "2": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90], "3": [0, 4, 6, 11, 13, 15, 18, 19, 20, 24, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 53, 56, 57, 60, 63, 64, 65, 68, 70, 71, 72, 74, 75, 76, 78, 84, 85, 86], "constraint": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "solut": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87], "convert": 0, "arrai": [0, 1, 6, 7, 8, 47, 48, 51, 56, 67, 68], "1d": [0, 51], "one": [0, 65], "code": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92], "complex": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 92], "c": [0, 39, 47, 64, 74, 81], "note": [0, 2, 3, 5, 23, 29, 39, 40, 47, 56, 60, 64, 70, 72, 74, 78, 81], "find": [1, 36, 40, 65, 80], "all": [1, 17, 24, 70], "number": [1, 13, 14, 19, 33, 37, 38, 40, 41, 60, 65, 74, 87], "disappear": 1, "an": [1, 57], "follow": [1, 57, 64, 65], "up": [1, 57, 64, 65], "mark": [1, 65], "appear": [1, 13, 14, 15, 75], "conclus": [1, 41, 86, 89], "rotat": 2, "imag": 2, "The": [2, 36, 40, 47], "math": [2, 36, 47, 48], "behind": [2, 36, 47, 48], "implement": [2, 3, 5, 23, 29, 40, 60, 70, 72, 78], "can": [3, 65, 72], "place": [3, 21], "flower": 3, "check": [3, 42, 80], "adjac": [3, 70], "rule": 3, "daili": 4, "temperatur": 4, "start": 4, "from": [4, 24, 67, 81, 85], "first": [4, 15, 23, 24], "dai": 4, "last": [4, 55], "kei": [4, 18, 30, 62], "takeawai": [4, 18, 30, 62], "transpos": 5, "matrix": [5, 57], "valid": [6, 71, 75], "mountain": 6, "singl": [8, 13], "element": [8, 27, 30, 47, 57, 58, 64, 67, 86], "sort": [8, 31, 36, 57, 58, 63, 64, 65, 67, 68, 69, 75, 86], "bruteforc": [8, 18, 35, 42, 53, 62, 83], "binari": [8, 9, 10, 11, 12, 37, 38, 44, 57], "search": [8, 9, 11, 23, 24, 57], "maximum": [10, 27, 38, 39, 42, 52, 86], "depth": [10, 23, 24], "tree": [10, 11, 12], "lowest": 11, "common": [11, 42], "ancestor": 11, "recurs": [11, 19, 20, 37, 43, 60, 61], "count": [13, 14, 16, 36, 45, 64, 75, 87], "bitwis": [13, 46], "exclus": 13, "OR": 13, "max": [14, 57], "k": [14, 53], "sum": [14, 26, 51, 53, 54, 56], "pair": [14, 32], "uniqu": [15, 20, 21, 63, 79, 81], "charact": [15, 63, 75, 76, 81], "string": [15, 36, 70, 72, 75, 82], "us": [15, 42, 46, 47, 56, 62, 71, 72], "map": [15, 26], "store": [15, 17, 18, 27, 29, 68, 76, 79, 84, 85], "vector": [15, 57, 66, 72], "triangl": 17, "minimum": [17, 38, 47, 63, 86], "path": [17, 20, 21, 24], "onli": [17, 18, 35, 86], "each": [17, 75], "row": 17, "largest": [18, 35, 58], "divis": [18, 44], "subset": [18, 49], "dynam": [18, 19, 20, 21, 22, 41], "program": [18, 19, 20, 21, 22, 41], "repres": 18, "maxsubset": 18, "fibonacci": 19, "reduc": [19, 20], "space": [19, 72], "4": [20, 24, 41, 53, 63, 76], "final": 20, "thought": 20, "ii": [21, 47, 67, 70], "i": [23, 66], "graph": [23, 25], "bipartit": 23, "color": 23, "node": [23, 29, 30, 32, 84, 85, 87], "sourc": 24, "target": [24, 56], "5": 24, "df": 24, "roman": 26, "integ": 26, "valu": [26, 27], "erasur": 27, "posit": [27, 76], "visit": [27, 65, 76, 84], "hash": 28, "tabl": 28, "intersect": 29, "two": [29, 31, 33, 83, 85, 88], "link": [29, 30, 34, 84, 87], "list": [29, 30, 31, 34, 84, 85, 87], "http": [], "leetcod": [90, 92], "com": [], "reiter": 29, "same": 29, "time": [29, 35, 72], "remov": [30, 62, 67, 70, 81, 85], "data": 30, "structur": 30, "consid": 30, "special": 30, "case": 30, "head": 30, "creat": 30, "previou": 30, "dummi": 30, "attent": 30, "merg": [31, 68], "construct": [31, 56, 80], "new": [31, 68], "swap": 32, "add": 33, "addit": 33, "With": [33, 56, 83], "rememb": 33, "best": [35, 89], "bui": 35, "sell": 35, "stock": 35, "smallest": [35, 57], "price": 35, "vowel": 36, "pattern": [36, 40, 80], "concaten": 37, "consecut": 37, "partit": 38, "Into": 38, "Of": 38, "deci": 38, "identifi": 38, "digit": 38, "n": [38, 72], "unit": 39, "truck": 39, "greedi": 39, "algorithm": [39, 92], "modern": [39, 47, 64], "stl": 39, "excel": 40, "sheet": 40, "column": 40, "perfect": 41, "squar": 41, "theori": 41, "further": 41, "perform": [41, 81], "improv": 41, "product": 42, "word": [42, 79], "length": 42, "letter": [42, 60, 70, 75], "bit": 42, "mask": 42, "power": [43, 44], "three": 43, "mathemat": [43, 50], "four": 44, "represent": 44, "wiggl": 45, "subsequ": 45, "local": 45, "extrema": 45, "num": [45, 51, 65], "ham": 46, "distanc": 46, "oper": 46, "xor": 46, "move": 47, "equal": [47, 53, 70], "median": 47, "std": [47, 65], "nth_element": 47, "comput": 47, "nest": 48, "understand": 48, "run": 51, "unchang": 51, "chang": 51, "subarrai": [52, 53, 86], "prefix": [53, 54], "faster": 53, "lookup": 53, "stone": 55, "weight": 55, "keep": [55, 57], "heaviest": 55, "top": 55, "multipl": 56, "go": 56, "backward": [56, 68], "priority_queu": 56, "kth": [57, 58], "transform": [57, 79], "d": 57, "build": [57, 72, 81], "heap": 57, "ungrown": 57, "stream": 58, "append": 58, "prioriti": [58, 59], "queue": [58, 59], "combin": 60, "phone": 60, "cover": 62, "interv": 62, "dictionari": 62, "order": [62, 63], "delet": 63, "make": 63, "frequenc": [63, 64], "major": 64, "pick": 64, "middl": [64, 87], "partial": 64, "duplic": [65, 67, 70], "how": [65, 90], "we": 65, "prove": 65, "least": 65, "must": 65, "exist": 65, "you": [65, 72, 93], "solv": [65, 72], "linear": 65, "runtim": 65, "bitset": 65, "my": 66, "calendar": 66, "set": [66, 79], "eras": 67, "reassign": [67, 68], "satisfi": 67, "result": 68, "contain": [68, 75, 83], "nums1": 68, "parenthes": 71, "stack": [71, 72, 73], "backspac": 72, "compar": [72, 74, 86], "clean": [72, 81], "": [72, 75], "behavior": 72, "why": 72, "instead": 72, "o": 72, "version": 74, "anagram": 75, "rearrang": 75, "both": 75, "t": 75, "If": 75, "input": 75, "unicod": 75, "longest": 76, "substr": 76, "without": 76, "repeat": 76, "detect": 77, "capit": 77, "basebal": 78, "game": 78, "mors": 79, "replac": 80, "biject": 80, "condit": 80, "email": 81, "address": 81, "ignor": 81, "scratch": 81, "high": 81, "most": 83, "water": 83, "pointer": [83, 85, 87, 88], "cycl": 84, "fast": [84, 87], "slow": [84, 87], "runner": 84, "nth": 85, "end": 85, "shortest": 86, "unsort": 86, "continu": 86, "differ": 86, "ob": 87, "challeng": 89, "practic": 89, "frequent": 90, "ask": 90, "question": 90, "content": [], "introduct": 92, "readabl": 92, "thank": 93, "leetsolv": [91, 94], "your": [], "skill": [], "By": [], "welcom": [91, 94]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Shift 2D Grid": [[0, "shift-2d-grid"]], "Problem statement": [[0, "problem-statement"], [1, "problem-statement"], [2, "problem-statement"], [3, "problem-statement"], [4, "problem-statement"], [5, "problem-statement"], [6, "problem-statement"], [8, "problem-statement"], [10, "problem-statement"], [11, "problem-statement"], [13, "problem-statement"], [14, "problem-statement"], [15, "problem-statement"], [17, "problem-statement"], [18, "problem-statement"], [19, "problem-statement"], [20, "problem-statement"], [21, "problem-statement"], [23, "problem-statement"], [24, "problem-statement"], [26, "problem-statement"], [27, "problem-statement"], [29, "problem-statement"], [30, "problem-statement"], [31, "problem-statement"], [32, "problem-statement"], [33, "problem-statement"], [35, "problem-statement"], [36, "problem-statement"], [37, "problem-statement"], [38, "problem-statement"], [39, "problem-statement"], [40, "problem-statement"], [41, "problem-statement"], [42, "problem-statement"], [43, "problem-statement"], [44, "problem-statement"], [45, "problem-statement"], [46, "problem-statement"], [47, "problem-statement"], [48, "problem-statement"], [51, "problem-statement"], [52, "problem-statement"], [55, "problem-statement"], [56, "problem-statement"], [57, "problem-statement"], [58, "problem-statement"], [60, "problem-statement"], [62, "problem-statement"], [63, "problem-statement"], [64, "problem-statement"], [65, "problem-statement"], [66, "problem-statement"], [67, "problem-statement"], [68, "problem-statement"], [70, "problem-statement"], [71, "problem-statement"], [72, "problem-statement"], [74, "problem-statement"], [75, "problem-statement"], [76, "problem-statement"], [77, "problem-statement"], [78, "problem-statement"], [79, "problem-statement"], [80, "problem-statement"], [81, "problem-statement"], [83, "problem-statement"], [84, "problem-statement"], [85, "problem-statement"], [86, "problem-statement"], [87, "problem-statement"]], "Example 1": [[0, "example-1"], [0, "id1"], [1, "example-1"], [2, "example-1"], [3, "example-1"], [4, "example-1"], [4, "id1"], [4, "id2"], [5, "example-1"], [6, "example-1"], [8, "example-1"], [8, "id1"], [10, "example-1"], [11, "example-1"], [13, "example-1"], [14, "example-1"], [15, "example-1"], [17, "example-1"], [18, "example-1"], [19, "example-1"], [20, "example-1"], [21, "example-1"], [23, "example-1"], [24, "example-1"], [26, "example-1"], [27, "example-1"], [29, "example-1"], [29, "id1"], [29, "id2"], [30, "example-1"], [31, "example-1"], [32, "example-1"], [33, "example-1"], [35, "example-1"], [36, "example-1"], [37, "example-1"], [38, "example-1"], [39, "example-1"], [40, "example-1"], [41, "example-1"], [42, "example-1"], [43, "example-1"], [44, "example-1"], [45, "example-1"], [46, "example-1"], [47, "example-1"], [48, "example-1"], [49, "example-1"], [51, "example-1"], [52, "example-1"], [52, "id1"], [53, "example-1"], [55, "example-1"], [56, "example-1"], [56, "id1"], [57, "example-1"], [58, "example-1"], [58, "id1"], [60, "example-1"], [62, "example-1"], [62, "id1"], [62, "id2"], [63, "example-1"], [64, "example-1"], [65, "example-1"], [66, "example-1"], [67, "example-1"], [68, "example-1"], [70, "example-1"], [71, "example-1"], [72, "example-1"], [74, "example-1"], [75, "example-1"], [76, "example-1"], [77, "example-1"], [78, "example-1"], [79, "example-1"], [80, "example-1"], [81, "example-1"], [83, "example-1"], [83, "id1"], [84, "example-1"], [84, "id1"], [85, "example-1"], [86, "example-1"], [86, "id1"], [87, "example-1"]], "Example 2": [[0, "example-2"], [1, "example-2"], [2, "example-2"], [3, "example-2"], [4, "example-2"], [5, "example-2"], [6, "example-2"], [8, "example-2"], [10, "example-2"], [11, "example-2"], [13, "example-2"], [14, "example-2"], [14, "id1"], [15, "example-2"], [17, "example-2"], [18, "example-2"], [19, "example-2"], [20, "example-2"], [21, "example-2"], [23, "example-2"], [24, "example-2"], [26, "example-2"], [27, "example-2"], [29, "example-2"], [30, "example-2"], [31, "example-2"], [32, "example-2"], [33, "example-2"], [35, "example-2"], [36, "example-2"], [37, "example-2"], [38, "example-2"], [38, "id1"], [39, "example-2"], [40, "example-2"], [41, "example-2"], [42, "example-2"], [43, "example-2"], [44, "example-2"], [45, "example-2"], [45, "id1"], [46, "example-2"], [47, "example-2"], [48, "example-2"], [49, "example-2"], [51, "example-2"], [52, "example-2"], [53, "example-2"], [55, "example-2"], [56, "example-2"], [57, "example-2"], [60, "example-2"], [62, "example-2"], [63, "example-2"], [64, "example-2"], [65, "example-2"], [67, "example-2"], [68, "example-2"], [70, "example-2"], [70, "id1"], [71, "example-2"], [72, "example-2"], [74, "example-2"], [75, "example-2"], [76, "example-2"], [77, "example-2"], [78, "example-2"], [79, "example-2"], [80, "example-2"], [81, "example-2"], [83, "example-2"], [84, "example-2"], [84, "id2"], [85, "example-2"], [86, "example-2"], [87, "example-2"]], "Example 3": [[0, "example-3"], [4, "example-3"], [6, "example-3"], [11, "example-3"], [13, "example-3"], [15, "example-3"], [18, "example-3"], [18, "id1"], [19, "example-3"], [20, "example-3"], [24, "example-3"], [26, "example-3"], [29, "example-3"], [30, "example-3"], [31, "example-3"], [32, "example-3"], [33, "example-3"], [36, "example-3"], [36, "id1"], [37, "example-3"], [38, "example-3"], [40, "example-3"], [41, "example-3"], [41, "id3"], [42, "example-3"], [43, "example-3"], [44, "example-3"], [45, "example-3"], [47, "example-3"], [49, "example-3"], [51, "example-3"], [52, "example-3"], [53, "example-3"], [56, "example-3"], [60, "example-3"], [63, "example-3"], [68, "example-3"], [70, "example-3"], [71, "example-3"], [72, "example-3"], [74, "example-3"], [76, "example-3"], [78, "example-3"], [84, "example-3"], [85, "example-3"], [86, "example-3"]], "Constraints": [[0, "constraints"], [1, "constraints"], [2, "constraints"], [3, "constraints"], [4, "constraints"], [5, "constraints"], [6, "constraints"], [8, "constraints"], [10, "constraints"], [11, "constraints"], [13, "constraints"], [14, "constraints"], [15, "constraints"], [17, "constraints"], [18, "constraints"], [19, "constraints"], [20, "constraints"], [21, "constraints"], [23, "constraints"], [24, "constraints"], [26, "constraints"], [27, "constraints"], [29, "constraints"], [30, "constraints"], [31, "constraints"], [32, "constraints"], [33, "constraints"], [35, "constraints"], [36, "constraints"], [37, "constraints"], [38, "constraints"], [39, "constraints"], [40, "constraints"], [41, "constraints"], [42, "constraints"], [43, "constraints"], [44, "constraints"], [45, "constraints"], [46, "constraints"], [47, "constraints"], [49, "constraints"], [51, "constraints"], [52, "constraints"], [53, "constraints"], [55, "constraints"], [56, "constraints"], [57, "constraints"], [58, "constraints"], [60, "constraints"], [62, "constraints"], [63, "constraints"], [64, "constraints"], [65, "constraints"], [66, "constraints"], [67, "constraints"], [68, "constraints"], [70, "constraints"], [71, "constraints"], [72, "constraints"], [74, "constraints"], [75, "constraints"], [76, "constraints"], [77, "constraints"], [78, "constraints"], [79, "constraints"], [80, "constraints"], [81, "constraints"], [83, "constraints"], [84, "constraints"], [85, "constraints"], [87, "constraints"]], "Solution: Convert a 2D array into a 1D one": [[0, "solution-convert-a-2d-array-into-a-1d-one"]], "Code": [[0, "code"], [1, "code"], [1, "id1"], [2, "code"], [3, "code"], [4, "code"], [4, "id3"], [5, "code"], [6, "code"], [8, "code"], [8, "id2"], [10, "code"], [11, "code"], [13, "code"], [13, "id1"], [14, "code"], [15, "code"], [15, "id1"], [17, "code"], [17, "id1"], [18, "code"], [18, "id2"], [19, "code"], [19, "id2"], [20, "code"], [20, "id1"], [20, "id3"], [21, "code"], [23, "code"], [24, "code"], [26, "code"], [27, "code"], [29, "code"], [29, "id3"], [30, "code"], [30, "id1"], [31, "code"], [32, "code"], [33, "code"], [35, "code"], [35, "id1"], [35, "id3"], [36, "code"], [36, "id2"], [37, "code"], [38, "code"], [39, "code"], [40, "code"], [41, "code"], [41, "id4"], [41, "id6"], [42, "code"], [42, "id1"], [43, "code"], [43, "id1"], [44, "code"], [44, "id1"], [45, "code"], [46, "code"], [47, "code"], [47, "id1"], [48, "code"], [49, "code"], [51, "code"], [51, "id1"], [52, "code"], [53, "code"], [53, "id1"], [53, "id3"], [55, "code"], [56, "code"], [56, "id2"], [57, "code"], [57, "id1"], [57, "id3"], [58, "code"], [58, "id2"], [60, "code"], [62, "code"], [62, "id3"], [63, "code"], [64, "code"], [64, "id1"], [64, "id2"], [65, "code"], [65, "id2"], [66, "code"], [66, "id1"], [67, "code"], [67, "id1"], [68, "code"], [68, "id1"], [70, "code"], [71, "code"], [72, "code"], [74, "code"], [75, "code"], [75, "id1"], [75, "id3"], [76, "code"], [77, "code"], [78, "code"], [79, "code"], [80, "code"], [81, "code"], [81, "id1"], [83, "code"], [83, "id2"], [84, "code"], [84, "id3"], [85, "code"], [85, "id1"], [86, "code"], [86, "id2"], [87, "code"], [87, "id1"]], "Complexity": [[0, "complexity"], [1, "complexity"], [1, "id2"], [2, "complexity"], [3, "complexity"], [4, "complexity"], [4, "id4"], [5, "complexity"], [6, "complexity"], [8, "complexity"], [8, "id3"], [10, "complexity"], [11, "complexity"], [13, "complexity"], [13, "id2"], [14, "complexity"], [15, "complexity"], [15, "id2"], [17, "complexity"], [17, "id2"], [18, "complexity"], [18, "id3"], [19, "complexity"], [19, "id1"], [19, "id3"], [20, "complexity"], [20, "id2"], [20, "id4"], [21, "complexity"], [23, "complexity"], [24, "complexity"], [26, "complexity"], [27, "complexity"], [29, "complexity"], [29, "id4"], [30, "complexity"], [30, "id2"], [31, "complexity"], [32, "complexity"], [33, "complexity"], [35, "complexity"], [35, "id2"], [35, "id4"], [36, "complexity"], [36, "id3"], [37, "complexity"], [38, "complexity"], [39, "complexity"], [40, "complexity"], [41, "complexity"], [41, "id5"], [41, "id7"], [42, "complexity"], [42, "id2"], [43, "complexity"], [43, "id2"], [44, "complexity"], [44, "id2"], [45, "complexity"], [46, "complexity"], [47, "complexity"], [47, "id2"], [48, "complexity"], [49, "complexity"], [51, "complexity"], [51, "id2"], [52, "complexity"], [53, "complexity"], [53, "id2"], [53, "id4"], [55, "complexity"], [56, "complexity"], [56, "id3"], [57, "complexity"], [57, "id2"], [57, "id4"], [58, "complexity"], [58, "id3"], [60, "complexity"], [62, "complexity"], [62, "id4"], [63, "complexity"], [64, "complexity"], [64, "id3"], [65, "complexity"], [65, "id1"], [65, "id3"], [66, "complexity"], [66, "id2"], [67, "complexity"], [67, "id2"], [68, "complexity"], [68, "id2"], [70, "complexity"], [72, "complexity"], [74, "complexity"], [75, "complexity"], [75, "id2"], [75, "id4"], [76, "complexity"], [77, "complexity"], [78, "complexity"], [79, "complexity"], [80, "complexity"], [81, "complexity"], [81, "id2"], [83, "complexity"], [83, "id3"], [84, "complexity"], [84, "id4"], [85, "complexity"], [85, "id2"], [86, "complexity"], [86, "id3"], [87, "complexity"], [87, "id2"]], "C++ notes": [[0, "c-notes"]], "Find All Numbers Disappeared in an Array": [[1, "find-all-numbers-disappeared-in-an-array"]], "Follow up": [[1, "follow-up"], [57, "follow-up"], [65, "follow-up"]], "Solution 1: Marking the appearances": [[1, "solution-1-marking-the-appearances"]], "Solution 2: Follow up": [[1, "solution-2-follow-up"]], "Conclusion": [[1, "conclusion"], [41, "conclusion"], [86, "conclusion"], [89, "conclusion"]], "Rotate Image": [[2, "rotate-image"]], "Solution: The math behind": [[2, "solution-the-math-behind"]], "Implementation notes": [[2, "implementation-notes"], [40, "implementation-notes"], [60, "implementation-notes"], [70, "implementation-notes"], [72, "implementation-notes"], [78, "implementation-notes"]], "Can Place Flowers": [[3, "can-place-flowers"]], "Solution: Check the no-adjacent-flowers rule": [[3, "solution-check-the-no-adjacent-flowers-rule"]], "Implementation note": [[3, "implementation-note"], [5, "implementation-note"], [23, "implementation-note"], [29, "implementation-note"]], "Daily Temperatures": [[4, "daily-temperatures"]], "Solution 1: Starting from the first day": [[4, "solution-1-starting-from-the-first-day"]], "Solution 2: Starting from the last day": [[4, "solution-2-starting-from-the-last-day"]], "Key takeaway": [[4, "key-takeaway"], [18, "key-takeaway"], [30, "key-takeaway"], [62, "key-takeaway"]], "Transpose Matrix": [[5, "transpose-matrix"]], "Solution": [[5, "solution"], [6, "solution"], [10, "solution"], [32, "solution"], [49, "solution"], [52, "solution"], [74, "solution"], [77, "solution"], [78, "solution"]], "Valid Mountain Array": [[6, "valid-mountain-array"]], "Array": [[7, "array"]], "Single Element in a Sorted Array": [[8, "single-element-in-a-sorted-array"]], "Solution 1: Bruteforce": [[8, "solution-1-bruteforce"], [35, "solution-1-bruteforce"], [42, "solution-1-bruteforce"], [53, "solution-1-bruteforce"], [62, "solution-1-bruteforce"], [83, "solution-1-bruteforce"]], "Solution 2: Binary search": [[8, "solution-2-binary-search"]], "Binary Search": [[9, "binary-search"]], "Maximum Depth of Binary Tree": [[10, "maximum-depth-of-binary-tree"]], "Lowest Common Ancestor of a Binary Search Tree": [[11, "lowest-common-ancestor-of-a-binary-search-tree"]], "Solution: Recursion": [[11, "solution-recursion"]], "Binary Tree": [[12, "binary-tree"]], "Single Number": [[13, "single-number"]], "Solution 1: Counting the appearances": [[13, "solution-1-counting-the-appearances"]], "Solution 2: Bitwise exclusive OR": [[13, "solution-2-bitwise-exclusive-or"]], "Max Number of K-Sum Pairs": [[14, "max-number-of-k-sum-pairs"]], "Solution: Count the appearances": [[14, "solution-count-the-appearances"]], "First Unique Character in a String": [[15, "first-unique-character-in-a-string"]], "Solution 1: Using map to store the appearances": [[15, "solution-1-using-map-to-store-the-appearances"]], "Solution 2: Using vector to store the appearances": [[15, "solution-2-using-vector-to-store-the-appearances"]], "Counting": [[16, "counting"]], "Triangle": [[17, "triangle"]], "Solution 1: Store all minimum paths": [[17, "solution-1-store-all-minimum-paths"]], "Solution 2: Store only the minimum paths of each row": [[17, "solution-2-store-only-the-minimum-paths-of-each-row"]], "Largest Divisible Subset": [[18, "largest-divisible-subset"]], "Solution 1: Bruteforce with Dynamic programming": [[18, "solution-1-bruteforce-with-dynamic-programming"]], "Solution 2: Store only the representative of the maxSubset": [[18, "solution-2-store-only-the-representative-of-the-maxsubset"]], "Fibonacci Number": [[19, "fibonacci-number"]], "Solution 1: Recursive": [[19, "solution-1-recursive"], [20, "solution-1-recursive"]], "Solution 2: Dynamic programming": [[19, "solution-2-dynamic-programming"], [20, "solution-2-dynamic-programming"]], "Solution 3: Reduce space for dynamic programming": [[19, "solution-3-reduce-space-for-dynamic-programming"]], "Unique Paths": [[20, "unique-paths"]], "Example 4": [[20, "example-4"], [24, "example-4"], [41, "example-4"], [41, "id1"], [41, "id2"], [53, "example-4"], [63, "example-4"], [76, "example-4"]], "Solution 3: Reduced dynamic programming": [[20, "solution-3-reduced-dynamic-programming"]], "Final thought": [[20, "final-thought"]], "Unique Paths II": [[21, "unique-paths-ii"]], "Solution: Dynamic programming in place": [[21, "solution-dynamic-programming-in-place"]], "Dynamic Programming": [[22, "dynamic-programming"]], "Is Graph Bipartite?": [[23, "is-graph-bipartite"]], "Solution: Coloring the nodes by Depth First Search": [[23, "solution-coloring-the-nodes-by-depth-first-search"]], "All Paths From Source to Target": [[24, "all-paths-from-source-to-target"]], "Example 5": [[24, "example-5"]], "Solution: Depth-first search (DFS)": [[24, "solution-depth-first-search-dfs"]], "Graph": [[25, "graph"]], "Roman to Integer": [[26, "roman-to-integer"]], "Solution: Mapping and summing the values": [[26, "solution-mapping-and-summing-the-values"]], "Maximum Erasure Value": [[27, "maximum-erasure-value"]], "Solution: Store the position of the visited elements": [[27, "solution-store-the-position-of-the-visited-elements"]], "Hash Table": [[28, "hash-table"]], "Intersection of Two Linked Lists": [[29, "intersection-of-two-linked-lists"]], "Solution 1: Store the nodes": [[29, "solution-1-store-the-nodes"], [85, "solution-1-store-the-nodes"]], "Solution 2: Reiterating the two lists at the same time": [[29, "solution-2-reiterating-the-two-lists-at-the-same-time"]], "Remove Linked List Elements": [[30, "remove-linked-list-elements"]], "Linked list data structure": [[30, "linked-list-data-structure"]], "Solution 1: Consider the special case for head": [[30, "solution-1-consider-the-special-case-for-head"]], "Solution 2: Create a previous dummy node for head": [[30, "solution-2-create-a-previous-dummy-node-for-head"]], "Attention!": [[30, "attention"]], "Merge Two Sorted Lists": [[31, "merge-two-sorted-lists"]], "Solution: Constructing a new list": [[31, "solution-constructing-a-new-list"]], "Swap Nodes in Pairs": [[32, "swap-nodes-in-pairs"]], "Add Two Numbers": [[33, "add-two-numbers"]], "Solution: Addition With Remember": [[33, "solution-addition-with-remember"]], "Linked List": [[34, "linked-list"]], "Best Time to Buy and Sell Stock": [[35, "best-time-to-buy-and-sell-stock"]], "Solution 2: Smallest and largest prices": [[35, "solution-2-smallest-and-largest-prices"]], "Solution 3: Only the smallest price": [[35, "solution-3-only-the-smallest-price"]], "Count Sorted Vowel Strings": [[36, "count-sorted-vowel-strings"]], "Solution 1: Finding the pattern": [[36, "solution-1-finding-the-pattern"]], "Findings": [[36, "findings"]], "Solution 2: The math behind the problem": [[36, "solution-2-the-math-behind-the-problem"]], "Concatenation of Consecutive Binary Numbers": [[37, "concatenation-of-consecutive-binary-numbers"]], "Solution: Recursive": [[37, "solution-recursive"], [60, "solution-recursive"]], "Partitioning Into Minimum Number Of Deci-Binary Numbers": [[38, "partitioning-into-minimum-number-of-deci-binary-numbers"]], "Solution: Identify the maximum digit of n": [[38, "solution-identify-the-maximum-digit-of-n"]], "Maximum Units on a Truck": [[39, "maximum-units-on-a-truck"]], "Solution: Greedy algorithm": [[39, "solution-greedy-algorithm"]], "Modern C++ STL notes": [[39, "modern-c-stl-notes"]], "Excel Sheet Column Number": [[40, "excel-sheet-column-number"]], "Solution: Finding The Pattern": [[40, "solution-finding-the-pattern"]], "Perfect Squares": [[41, "perfect-squares"]], "Solution 1: Dynamic Programming": [[41, "solution-1-dynamic-programming"]], "Solution 2: Number Theory": [[41, "solution-2-number-theory"]], "Solution 3: Further performance improvement": [[41, "solution-3-further-performance-improvement"]], "Maximum Product of Word Lengths": [[42, "maximum-product-of-word-lengths"]], "Solution 2: Checking common letters using bit masking": [[42, "solution-2-checking-common-letters-using-bit-masking"]], "Power of Three": [[43, "power-of-three"]], "Solution 1: Recursion": [[43, "solution-1-recursion"]], "Solution 2: Mathematics and the constraints of the problem": [[43, "solution-2-mathematics-and-the-constraints-of-the-problem"]], "Power of Four": [[44, "power-of-four"]], "Solution 1: Division by four": [[44, "solution-1-division-by-four"]], "Solution 2: Binary representation": [[44, "solution-2-binary-representation"]], "Wiggle Subsequence": [[45, "wiggle-subsequence"]], "Solution: Counting the local extrema of nums": [[45, "solution-counting-the-local-extrema-of-nums"]], "Hamming Distance": [[46, "hamming-distance"]], "Solution: Using bitwise operator XOR": [[46, "solution-using-bitwise-operator-xor"]], "Minimum Moves to Equal Array Elements II": [[47, "minimum-moves-to-equal-array-elements-ii"]], "Solution 1: Median - The math behind the problem": [[47, "solution-1-median-the-math-behind-the-problem"]], "Solution 2: Using std::nth_element to compute the median": [[47, "solution-2-using-std-nth-element-to-compute-the-median"]], "Modern C++ notes": [[47, "modern-c-notes"], [64, "modern-c-notes"]], "Array Nesting": [[48, "array-nesting"]], "Constraints:": [[48, "constraints"], [86, "constraints"]], "Solution: Understanding the math behind": [[48, "solution-understanding-the-math-behind"]], "Subsets": [[49, "subsets"]], "Problem Statement": [[49, "problem-statement"], [53, "problem-statement"]], "Mathematics": [[50, "mathematics"]], "Running Sum of 1d Array": [[51, "running-sum-of-1d-array"]], "Solution 1: Unchange nums": [[51, "solution-1-unchange-nums"]], "Solution 2: Change nums": [[51, "solution-2-change-nums"]], "Maximum Subarray": [[52, "maximum-subarray"]], "Subarray Sum Equals K": [[53, "subarray-sum-equals-k"]], "Solution 2: Prefix sum": [[53, "solution-2-prefix-sum"]], "Solution 3: Faster lookup": [[53, "solution-3-faster-lookup"]], "Prefix Sum": [[54, "prefix-sum"]], "Last Stone Weight": [[55, "last-stone-weight"]], "Solution: Keeping the heaviest stones on top": [[55, "solution-keeping-the-heaviest-stones-on-top"]], "Construct Target Array With Multiple Sums": [[56, "construct-target-array-with-multiple-sums"]], "Solution 1: Going backward": [[56, "solution-1-going-backward"]], "Notes": [[56, "notes"]], "Solution 2: Using priority_queue": [[56, "solution-2-using-priority-queue"]], "Kth Smallest Element in a Sorted Matrix": [[57, "kth-smallest-element-in-a-sorted-matrix"]], "Solution 1: Transform the 2-D matrix into an 1-D vector then sort": [[57, "solution-1-transform-the-2-d-matrix-into-an-1-d-vector-then-sort"]], "Solution 2: Build the max heap and keep it ungrown": [[57, "solution-2-build-the-max-heap-and-keep-it-ungrown"]], "Solution 3: Binary search": [[57, "solution-3-binary-search"]], "Kth Largest Element in a Stream": [[58, "kth-largest-element-in-a-stream"]], "Solution 1: Sort and Append": [[58, "solution-1-sort-and-append"]], "Solution 2: Priority queue": [[58, "solution-2-priority-queue"]], "Priority Queue": [[59, "priority-queue"]], "Letter Combinations of a Phone Number": [[60, "letter-combinations-of-a-phone-number"]], "Example 1 and 3": [[60, "example-1-and-3"]], "Recursive": [[61, "recursive"]], "Remove Covered Intervals": [[62, "remove-covered-intervals"]], "Solution 2: Using dictionary order": [[62, "solution-2-using-dictionary-order"]], "Minimum Deletions to Make Character Frequencies Unique": [[63, "minimum-deletions-to-make-character-frequencies-unique"]], "Solution: Delete the frequencies in sorted order": [[63, "solution-delete-the-frequencies-in-sorted-order"]], "Majority Element": [[64, "majority-element"]], "Follow-up:": [[64, "follow-up"]], "Solution 1: Counting the frequency": [[64, "solution-1-counting-the-frequency"]], "Solution 2: Sorting and picking the middle element": [[64, "solution-2-sorting-and-picking-the-middle-element"]], "Solution 3: Partial sort": [[64, "solution-3-partial-sort"]], "Find the Duplicate Number": [[65, "find-the-duplicate-number"]], "Solution 1: Sorting": [[65, "solution-1-sorting"]], "How can we prove that at least one duplicate number must exist in nums?": [[65, "how-can-we-prove-that-at-least-one-duplicate-number-must-exist-in-nums"]], "Can you solve the problem in linear runtime complexity?": [[65, "can-you-solve-the-problem-in-linear-runtime-complexity"]], "Solution 2: Marking the visited numbers": [[65, "solution-2-marking-the-visited-numbers"]], "Solution 3: Marking with std::bitset": [[65, "solution-3-marking-with-std-bitset"]], "My Calendar I": [[66, "my-calendar-i"]], "Solution 1: Vector": [[66, "solution-1-vector"]], "Solution 2: Set": [[66, "solution-2-set"]], "Remove Duplicates from Sorted Array II": [[67, "remove-duplicates-from-sorted-array-ii"]], "Solution 1: Erasing the duplicates": [[67, "solution-1-erasing-the-duplicates"]], "Solution 2: Reassigning the satisfying elements": [[67, "solution-2-reassigning-the-satisfying-elements"]], "Merge Sorted Array": [[68, "merge-sorted-array"]], "Solution 1: Store the result in a new container": [[68, "solution-1-store-the-result-in-a-new-container"]], "Solution 2: Reassigning nums1 backward": [[68, "solution-2-reassigning-nums1-backward"]], "Sorting": [[69, "sorting"]], "Remove All Adjacent Duplicates in String II": [[70, "remove-all-adjacent-duplicates-in-string-ii"]], "Solution: Strings of adjacent equal letters": [[70, "solution-strings-of-adjacent-equal-letters"]], "Valid Parentheses": [[71, "valid-parentheses"]], "Solution: Using a stack": [[71, "solution-using-a-stack"]], "Complexity:": [[71, "complexity"]], "Backspace String Compare": [[72, "backspace-string-compare"]], "Solution: Build and clean the string using the stack\u2019s behaviors": [[72, "solution-build-and-clean-the-string-using-the-stack-s-behaviors"]], "Why vector  instead of stack?": [[72, "why-vector-instead-of-stack"]], "Can you solve it in O(n) time and O(1) space?": [[72, "can-you-solve-it-in-o-n-time-and-o-1-space"]], "Stack": [[73, "stack"]], "Compare Version Numbers": [[74, "compare-version-numbers"]], "C++ Notes": [[74, "c-notes"], [81, "c-notes"]], "Valid Anagram": [[75, "valid-anagram"]], "Solution 1: Rearrange both s and t into a sorted string": [[75, "solution-1-rearrange-both-s-and-t-into-a-sorted-string"]], "Solution 2: Count the appearances of each letter": [[75, "solution-2-count-the-appearances-of-each-letter"]], "Solution 3: If the inputs contain Unicode characters": [[75, "solution-3-if-the-inputs-contain-unicode-characters"]], "Longest Substring Without Repeating Characters": [[76, "longest-substring-without-repeating-characters"]], "Solution: Store the position of the visited characters": [[76, "solution-store-the-position-of-the-visited-characters"]], "Detect Capital": [[77, "detect-capital"]], "Baseball Game": [[78, "baseball-game"]], "Unique Morse Code Words": [[79, "unique-morse-code-words"]], "Solution: Store the transformations in a set": [[79, "solution-store-the-transformations-in-a-set"]], "Find and Replace Pattern": [[80, "find-and-replace-pattern"]], "Solution: Construct the bijection and check the condition": [[80, "solution-construct-the-bijection-and-check-the-condition"]], "Unique Email Addresses": [[81, "unique-email-addresses"]], "Solution 1: Removing the ignored characters": [[81, "solution-1-removing-the-ignored-characters"]], "Solution 2: Building the clean email addresses from scratch": [[81, "solution-2-building-the-clean-email-addresses-from-scratch"]], "High-performance C++": [[81, "high-performance-c"]], "String": [[82, "string"]], "Container With Most Water": [[83, "container-with-most-water"]], "Solution 2: Two pointers": [[83, "solution-2-two-pointers"], [85, "solution-2-two-pointers"]], "Linked List Cycle": [[84, "linked-list-cycle"]], "Solution 1: Storing the visited nodes": [[84, "solution-1-storing-the-visited-nodes"]], "Solution 2: Fast and slow runners": [[84, "solution-2-fast-and-slow-runners"]], "Remove Nth Node From End of List": [[85, "remove-nth-node-from-end-of-list"]], "Shortest Unsorted Continuous Subarray": [[86, "shortest-unsorted-continuous-subarray"]], "Solution 1: Sort and compare the difference": [[86, "solution-1-sort-and-compare-the-difference"]], "Solution 2: Comparing only maximum and minimum elements": [[86, "solution-2-comparing-only-maximum-and-minimum-elements"]], "Middle of the Linked List": [[87, "middle-of-the-linked-list"]], "Solution 1: Counting the number of nodes": [[87, "solution-1-counting-the-number-of-nodes"]], "Solution 2: Slow and fast pointers": [[87, "solution-2-slow-and-fast-pointers"]], "OBS!": [[87, "obs"]], "Two Pointers": [[88, "two-pointers"]], "Coding challenge best practices": [[89, "coding-challenge-best-practices"]], "Frequently Asked Questions": [[90, "frequently-asked-questions"]], "1. Leetcode?": [[90, "leetcode"]], "2. How to?": [[90, "how-to"]], "Welcome to LeetSolve!": [[91, "welcome-to-leetsolve"], [94, "welcome-to-leetsolve"]], "Introduction": [[92, "introduction"]], "Leetcode": [[92, "leetcode"]], "Algorithm complexity": [[92, "algorithm-complexity"]], "Readable code": [[92, "readable-code"]], "Thank you!": [[93, "thank-you"]]}, "indexentries": {}})